{"ast":null,"code":"\"use client\";\n\n// src/popover.tsx\nimport * as React from \"react\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { DismissableLayer } from \"@radix-ui/react-dismissable-layer\";\nimport { useFocusGuards } from \"@radix-ui/react-focus-guards\";\nimport { FocusScope } from \"@radix-ui/react-focus-scope\";\nimport { useId } from \"@radix-ui/react-id\";\nimport * as PopperPrimitive from \"@radix-ui/react-popper\";\nimport { createPopperScope } from \"@radix-ui/react-popper\";\nimport { Portal as PortalPrimitive } from \"@radix-ui/react-portal\";\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { createSlot } from \"@radix-ui/react-slot\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { hideOthers } from \"aria-hidden\";\nimport { RemoveScroll } from \"react-remove-scroll\";\nimport { jsx } from \"react/jsx-runtime\";\nvar POPOVER_NAME = \"Popover\";\nvar [createPopoverContext, createPopoverScope] = createContextScope(POPOVER_NAME, [createPopperScope]);\nvar usePopperScope = createPopperScope();\nvar [PopoverProvider, usePopoverContext] = createPopoverContext(POPOVER_NAME);\nvar Popover = props => {\n  const {\n    __scopePopover,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    modal = false\n  } = props;\n  const popperScope = usePopperScope(__scopePopover);\n  const triggerRef = React.useRef(null);\n  const [hasCustomAnchor, setHasCustomAnchor] = React.useState(false);\n  const [open, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen ?? false,\n    onChange: onOpenChange,\n    caller: POPOVER_NAME\n  });\n  return /* @__PURE__ */jsx(PopperPrimitive.Root, {\n    ...popperScope,\n    children: /* @__PURE__ */jsx(PopoverProvider, {\n      scope: __scopePopover,\n      contentId: useId(),\n      triggerRef,\n      open,\n      onOpenChange: setOpen,\n      onOpenToggle: React.useCallback(() => setOpen(prevOpen => !prevOpen), [setOpen]),\n      hasCustomAnchor,\n      onCustomAnchorAdd: React.useCallback(() => setHasCustomAnchor(true), []),\n      onCustomAnchorRemove: React.useCallback(() => setHasCustomAnchor(false), []),\n      modal,\n      children\n    })\n  });\n};\nPopover.displayName = POPOVER_NAME;\nvar ANCHOR_NAME = \"PopoverAnchor\";\nvar PopoverAnchor = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopePopover,\n    ...anchorProps\n  } = props;\n  const context = usePopoverContext(ANCHOR_NAME, __scopePopover);\n  const popperScope = usePopperScope(__scopePopover);\n  const {\n    onCustomAnchorAdd,\n    onCustomAnchorRemove\n  } = context;\n  React.useEffect(() => {\n    onCustomAnchorAdd();\n    return () => onCustomAnchorRemove();\n  }, [onCustomAnchorAdd, onCustomAnchorRemove]);\n  return /* @__PURE__ */jsx(PopperPrimitive.Anchor, {\n    ...popperScope,\n    ...anchorProps,\n    ref: forwardedRef\n  });\n});\nPopoverAnchor.displayName = ANCHOR_NAME;\nvar TRIGGER_NAME = \"PopoverTrigger\";\nvar PopoverTrigger = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopePopover,\n    ...triggerProps\n  } = props;\n  const context = usePopoverContext(TRIGGER_NAME, __scopePopover);\n  const popperScope = usePopperScope(__scopePopover);\n  const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);\n  const trigger = /* @__PURE__ */jsx(Primitive.button, {\n    type: \"button\",\n    \"aria-haspopup\": \"dialog\",\n    \"aria-expanded\": context.open,\n    \"aria-controls\": context.contentId,\n    \"data-state\": getState(context.open),\n    ...triggerProps,\n    ref: composedTriggerRef,\n    onClick: composeEventHandlers(props.onClick, context.onOpenToggle)\n  });\n  return context.hasCustomAnchor ? trigger : /* @__PURE__ */jsx(PopperPrimitive.Anchor, {\n    asChild: true,\n    ...popperScope,\n    children: trigger\n  });\n});\nPopoverTrigger.displayName = TRIGGER_NAME;\nvar PORTAL_NAME = \"PopoverPortal\";\nvar [PortalProvider, usePortalContext] = createPopoverContext(PORTAL_NAME, {\n  forceMount: void 0\n});\nvar PopoverPortal = props => {\n  const {\n    __scopePopover,\n    forceMount,\n    children,\n    container\n  } = props;\n  const context = usePopoverContext(PORTAL_NAME, __scopePopover);\n  return /* @__PURE__ */jsx(PortalProvider, {\n    scope: __scopePopover,\n    forceMount,\n    children: /* @__PURE__ */jsx(Presence, {\n      present: forceMount || context.open,\n      children: /* @__PURE__ */jsx(PortalPrimitive, {\n        asChild: true,\n        container,\n        children\n      })\n    })\n  });\n};\nPopoverPortal.displayName = PORTAL_NAME;\nvar CONTENT_NAME = \"PopoverContent\";\nvar PopoverContent = React.forwardRef((props, forwardedRef) => {\n  const portalContext = usePortalContext(CONTENT_NAME, props.__scopePopover);\n  const {\n    forceMount = portalContext.forceMount,\n    ...contentProps\n  } = props;\n  const context = usePopoverContext(CONTENT_NAME, props.__scopePopover);\n  return /* @__PURE__ */jsx(Presence, {\n    present: forceMount || context.open,\n    children: context.modal ? /* @__PURE__ */jsx(PopoverContentModal, {\n      ...contentProps,\n      ref: forwardedRef\n    }) : /* @__PURE__ */jsx(PopoverContentNonModal, {\n      ...contentProps,\n      ref: forwardedRef\n    })\n  });\n});\nPopoverContent.displayName = CONTENT_NAME;\nvar Slot = createSlot(\"PopoverContent.RemoveScroll\");\nvar PopoverContentModal = React.forwardRef((props, forwardedRef) => {\n  const context = usePopoverContext(CONTENT_NAME, props.__scopePopover);\n  const contentRef = React.useRef(null);\n  const composedRefs = useComposedRefs(forwardedRef, contentRef);\n  const isRightClickOutsideRef = React.useRef(false);\n  React.useEffect(() => {\n    const content = contentRef.current;\n    if (content) return hideOthers(content);\n  }, []);\n  return /* @__PURE__ */jsx(RemoveScroll, {\n    as: Slot,\n    allowPinchZoom: true,\n    children: /* @__PURE__ */jsx(PopoverContentImpl, {\n      ...props,\n      ref: composedRefs,\n      trapFocus: context.open,\n      disableOutsidePointerEvents: true,\n      onCloseAutoFocus: composeEventHandlers(props.onCloseAutoFocus, event => {\n        event.preventDefault();\n        if (!isRightClickOutsideRef.current) context.triggerRef.current?.focus();\n      }),\n      onPointerDownOutside: composeEventHandlers(props.onPointerDownOutside, event => {\n        const originalEvent = event.detail.originalEvent;\n        const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;\n        const isRightClick = originalEvent.button === 2 || ctrlLeftClick;\n        isRightClickOutsideRef.current = isRightClick;\n      }, {\n        checkForDefaultPrevented: false\n      }),\n      onFocusOutside: composeEventHandlers(props.onFocusOutside, event => event.preventDefault(), {\n        checkForDefaultPrevented: false\n      })\n    })\n  });\n});\nvar PopoverContentNonModal = React.forwardRef((props, forwardedRef) => {\n  const context = usePopoverContext(CONTENT_NAME, props.__scopePopover);\n  const hasInteractedOutsideRef = React.useRef(false);\n  const hasPointerDownOutsideRef = React.useRef(false);\n  return /* @__PURE__ */jsx(PopoverContentImpl, {\n    ...props,\n    ref: forwardedRef,\n    trapFocus: false,\n    disableOutsidePointerEvents: false,\n    onCloseAutoFocus: event => {\n      props.onCloseAutoFocus?.(event);\n      if (!event.defaultPrevented) {\n        if (!hasInteractedOutsideRef.current) context.triggerRef.current?.focus();\n        event.preventDefault();\n      }\n      hasInteractedOutsideRef.current = false;\n      hasPointerDownOutsideRef.current = false;\n    },\n    onInteractOutside: event => {\n      props.onInteractOutside?.(event);\n      if (!event.defaultPrevented) {\n        hasInteractedOutsideRef.current = true;\n        if (event.detail.originalEvent.type === \"pointerdown\") {\n          hasPointerDownOutsideRef.current = true;\n        }\n      }\n      const target = event.target;\n      const targetIsTrigger = context.triggerRef.current?.contains(target);\n      if (targetIsTrigger) event.preventDefault();\n      if (event.detail.originalEvent.type === \"focusin\" && hasPointerDownOutsideRef.current) {\n        event.preventDefault();\n      }\n    }\n  });\n});\nvar PopoverContentImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopePopover,\n    trapFocus,\n    onOpenAutoFocus,\n    onCloseAutoFocus,\n    disableOutsidePointerEvents,\n    onEscapeKeyDown,\n    onPointerDownOutside,\n    onFocusOutside,\n    onInteractOutside,\n    ...contentProps\n  } = props;\n  const context = usePopoverContext(CONTENT_NAME, __scopePopover);\n  const popperScope = usePopperScope(__scopePopover);\n  useFocusGuards();\n  return /* @__PURE__ */jsx(FocusScope, {\n    asChild: true,\n    loop: true,\n    trapped: trapFocus,\n    onMountAutoFocus: onOpenAutoFocus,\n    onUnmountAutoFocus: onCloseAutoFocus,\n    children: /* @__PURE__ */jsx(DismissableLayer, {\n      asChild: true,\n      disableOutsidePointerEvents,\n      onInteractOutside,\n      onEscapeKeyDown,\n      onPointerDownOutside,\n      onFocusOutside,\n      onDismiss: () => context.onOpenChange(false),\n      children: /* @__PURE__ */jsx(PopperPrimitive.Content, {\n        \"data-state\": getState(context.open),\n        role: \"dialog\",\n        id: context.contentId,\n        ...popperScope,\n        ...contentProps,\n        ref: forwardedRef,\n        style: {\n          ...contentProps.style,\n          // re-namespace exposed content custom properties\n          ...{\n            \"--radix-popover-content-transform-origin\": \"var(--radix-popper-transform-origin)\",\n            \"--radix-popover-content-available-width\": \"var(--radix-popper-available-width)\",\n            \"--radix-popover-content-available-height\": \"var(--radix-popper-available-height)\",\n            \"--radix-popover-trigger-width\": \"var(--radix-popper-anchor-width)\",\n            \"--radix-popover-trigger-height\": \"var(--radix-popper-anchor-height)\"\n          }\n        }\n      })\n    })\n  });\n});\nvar CLOSE_NAME = \"PopoverClose\";\nvar PopoverClose = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopePopover,\n    ...closeProps\n  } = props;\n  const context = usePopoverContext(CLOSE_NAME, __scopePopover);\n  return /* @__PURE__ */jsx(Primitive.button, {\n    type: \"button\",\n    ...closeProps,\n    ref: forwardedRef,\n    onClick: composeEventHandlers(props.onClick, () => context.onOpenChange(false))\n  });\n});\nPopoverClose.displayName = CLOSE_NAME;\nvar ARROW_NAME = \"PopoverArrow\";\nvar PopoverArrow = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopePopover,\n    ...arrowProps\n  } = props;\n  const popperScope = usePopperScope(__scopePopover);\n  return /* @__PURE__ */jsx(PopperPrimitive.Arrow, {\n    ...popperScope,\n    ...arrowProps,\n    ref: forwardedRef\n  });\n});\nPopoverArrow.displayName = ARROW_NAME;\nfunction getState(open) {\n  return open ? \"open\" : \"closed\";\n}\nvar Root2 = Popover;\nvar Anchor2 = PopoverAnchor;\nvar Trigger = PopoverTrigger;\nvar Portal = PopoverPortal;\nvar Content2 = PopoverContent;\nvar Close = PopoverClose;\nvar Arrow2 = PopoverArrow;\nexport { Anchor2 as Anchor, Arrow2 as Arrow, Close, Content2 as Content, Popover, PopoverAnchor, PopoverArrow, PopoverClose, PopoverContent, PopoverPortal, PopoverTrigger, Portal, Root2 as Root, Trigger, createPopoverScope };","map":{"version":3,"names":["React","composeEventHandlers","useComposedRefs","createContextScope","DismissableLayer","useFocusGuards","FocusScope","useId","PopperPrimitive","createPopperScope","Portal","PortalPrimitive","Presence","Primitive","createSlot","useControllableState","hideOthers","RemoveScroll","jsx","POPOVER_NAME","createPopoverContext","createPopoverScope","usePopperScope","PopoverProvider","usePopoverContext","Popover","props","__scopePopover","children","open","openProp","defaultOpen","onOpenChange","modal","popperScope","triggerRef","useRef","hasCustomAnchor","setHasCustomAnchor","useState","setOpen","prop","defaultProp","onChange","caller","Root","scope","contentId","onOpenToggle","useCallback","prevOpen","onCustomAnchorAdd","onCustomAnchorRemove","displayName","ANCHOR_NAME","PopoverAnchor","forwardRef","forwardedRef","anchorProps","context","useEffect","Anchor","ref","TRIGGER_NAME","PopoverTrigger","triggerProps","composedTriggerRef","trigger","button","type","getState","onClick","asChild","PORTAL_NAME","PortalProvider","usePortalContext","forceMount","PopoverPortal","container","present","CONTENT_NAME","PopoverContent","portalContext","contentProps","PopoverContentModal","PopoverContentNonModal","Slot","contentRef","composedRefs","isRightClickOutsideRef","content","current","as","allowPinchZoom","PopoverContentImpl","trapFocus","disableOutsidePointerEvents","onCloseAutoFocus","event","preventDefault","focus","onPointerDownOutside","originalEvent","detail","ctrlLeftClick","ctrlKey","isRightClick","checkForDefaultPrevented","onFocusOutside","hasInteractedOutsideRef","hasPointerDownOutsideRef","defaultPrevented","onInteractOutside","target","targetIsTrigger","contains","onOpenAutoFocus","onEscapeKeyDown","loop","trapped","onMountAutoFocus","onUnmountAutoFocus","onDismiss","Content","role","id","style","CLOSE_NAME","PopoverClose","closeProps","ARROW_NAME","PopoverArrow","arrowProps","Arrow","Root2","Anchor2","Trigger","Content2","Close","Arrow2"],"sources":["/Users/paulius/Downloads/Projects/Meta Ads Uploader/frontend/node_modules/@radix-ui/react-popover/src/popover.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\nimport { useFocusGuards } from '@radix-ui/react-focus-guards';\nimport { FocusScope } from '@radix-ui/react-focus-scope';\nimport { useId } from '@radix-ui/react-id';\nimport * as PopperPrimitive from '@radix-ui/react-popper';\nimport { createPopperScope } from '@radix-ui/react-popper';\nimport { Portal as PortalPrimitive } from '@radix-ui/react-portal';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { createSlot } from '@radix-ui/react-slot';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { hideOthers } from 'aria-hidden';\nimport { RemoveScroll } from 'react-remove-scroll';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Popover\n * -----------------------------------------------------------------------------------------------*/\n\nconst POPOVER_NAME = 'Popover';\n\ntype ScopedProps<P> = P & { __scopePopover?: Scope };\nconst [createPopoverContext, createPopoverScope] = createContextScope(POPOVER_NAME, [\n  createPopperScope,\n]);\nconst usePopperScope = createPopperScope();\n\ntype PopoverContextValue = {\n  triggerRef: React.RefObject<HTMLButtonElement | null>;\n  contentId: string;\n  open: boolean;\n  onOpenChange(open: boolean): void;\n  onOpenToggle(): void;\n  hasCustomAnchor: boolean;\n  onCustomAnchorAdd(): void;\n  onCustomAnchorRemove(): void;\n  modal: boolean;\n};\n\nconst [PopoverProvider, usePopoverContext] =\n  createPopoverContext<PopoverContextValue>(POPOVER_NAME);\n\ninterface PopoverProps {\n  children?: React.ReactNode;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?: (open: boolean) => void;\n  modal?: boolean;\n}\n\nconst Popover: React.FC<PopoverProps> = (props: ScopedProps<PopoverProps>) => {\n  const {\n    __scopePopover,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    modal = false,\n  } = props;\n  const popperScope = usePopperScope(__scopePopover);\n  const triggerRef = React.useRef<HTMLButtonElement>(null);\n  const [hasCustomAnchor, setHasCustomAnchor] = React.useState(false);\n  const [open, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen ?? false,\n    onChange: onOpenChange,\n    caller: POPOVER_NAME,\n  });\n\n  return (\n    <PopperPrimitive.Root {...popperScope}>\n      <PopoverProvider\n        scope={__scopePopover}\n        contentId={useId()}\n        triggerRef={triggerRef}\n        open={open}\n        onOpenChange={setOpen}\n        onOpenToggle={React.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen])}\n        hasCustomAnchor={hasCustomAnchor}\n        onCustomAnchorAdd={React.useCallback(() => setHasCustomAnchor(true), [])}\n        onCustomAnchorRemove={React.useCallback(() => setHasCustomAnchor(false), [])}\n        modal={modal}\n      >\n        {children}\n      </PopoverProvider>\n    </PopperPrimitive.Root>\n  );\n};\n\nPopover.displayName = POPOVER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PopoverAnchor\n * -----------------------------------------------------------------------------------------------*/\n\nconst ANCHOR_NAME = 'PopoverAnchor';\n\ntype PopoverAnchorElement = React.ComponentRef<typeof PopperPrimitive.Anchor>;\ntype PopperAnchorProps = React.ComponentPropsWithoutRef<typeof PopperPrimitive.Anchor>;\ninterface PopoverAnchorProps extends PopperAnchorProps {}\n\nconst PopoverAnchor = React.forwardRef<PopoverAnchorElement, PopoverAnchorProps>(\n  (props: ScopedProps<PopoverAnchorProps>, forwardedRef) => {\n    const { __scopePopover, ...anchorProps } = props;\n    const context = usePopoverContext(ANCHOR_NAME, __scopePopover);\n    const popperScope = usePopperScope(__scopePopover);\n    const { onCustomAnchorAdd, onCustomAnchorRemove } = context;\n\n    React.useEffect(() => {\n      onCustomAnchorAdd();\n      return () => onCustomAnchorRemove();\n    }, [onCustomAnchorAdd, onCustomAnchorRemove]);\n\n    return <PopperPrimitive.Anchor {...popperScope} {...anchorProps} ref={forwardedRef} />;\n  }\n);\n\nPopoverAnchor.displayName = ANCHOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PopoverTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'PopoverTrigger';\n\ntype PopoverTriggerElement = React.ComponentRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface PopoverTriggerProps extends PrimitiveButtonProps {}\n\nconst PopoverTrigger = React.forwardRef<PopoverTriggerElement, PopoverTriggerProps>(\n  (props: ScopedProps<PopoverTriggerProps>, forwardedRef) => {\n    const { __scopePopover, ...triggerProps } = props;\n    const context = usePopoverContext(TRIGGER_NAME, __scopePopover);\n    const popperScope = usePopperScope(__scopePopover);\n    const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);\n\n    const trigger = (\n      <Primitive.button\n        type=\"button\"\n        aria-haspopup=\"dialog\"\n        aria-expanded={context.open}\n        aria-controls={context.contentId}\n        data-state={getState(context.open)}\n        {...triggerProps}\n        ref={composedTriggerRef}\n        onClick={composeEventHandlers(props.onClick, context.onOpenToggle)}\n      />\n    );\n\n    return context.hasCustomAnchor ? (\n      trigger\n    ) : (\n      <PopperPrimitive.Anchor asChild {...popperScope}>\n        {trigger}\n      </PopperPrimitive.Anchor>\n    );\n  }\n);\n\nPopoverTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PopoverPortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'PopoverPortal';\n\ntype PortalContextValue = { forceMount?: true };\nconst [PortalProvider, usePortalContext] = createPopoverContext<PortalContextValue>(PORTAL_NAME, {\n  forceMount: undefined,\n});\n\ntype PortalProps = React.ComponentPropsWithoutRef<typeof PortalPrimitive>;\ninterface PopoverPortalProps {\n  children?: React.ReactNode;\n  /**\n   * Specify a container element to portal the content into.\n   */\n  container?: PortalProps['container'];\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst PopoverPortal: React.FC<PopoverPortalProps> = (props: ScopedProps<PopoverPortalProps>) => {\n  const { __scopePopover, forceMount, children, container } = props;\n  const context = usePopoverContext(PORTAL_NAME, __scopePopover);\n  return (\n    <PortalProvider scope={__scopePopover} forceMount={forceMount}>\n      <Presence present={forceMount || context.open}>\n        <PortalPrimitive asChild container={container}>\n          {children}\n        </PortalPrimitive>\n      </Presence>\n    </PortalProvider>\n  );\n};\n\nPopoverPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PopoverContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'PopoverContent';\n\ninterface PopoverContentProps extends PopoverContentTypeProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst PopoverContent = React.forwardRef<PopoverContentTypeElement, PopoverContentProps>(\n  (props: ScopedProps<PopoverContentProps>, forwardedRef) => {\n    const portalContext = usePortalContext(CONTENT_NAME, props.__scopePopover);\n    const { forceMount = portalContext.forceMount, ...contentProps } = props;\n    const context = usePopoverContext(CONTENT_NAME, props.__scopePopover);\n    return (\n      <Presence present={forceMount || context.open}>\n        {context.modal ? (\n          <PopoverContentModal {...contentProps} ref={forwardedRef} />\n        ) : (\n          <PopoverContentNonModal {...contentProps} ref={forwardedRef} />\n        )}\n      </Presence>\n    );\n  }\n);\n\nPopoverContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Slot = createSlot('PopoverContent.RemoveScroll');\n\ntype PopoverContentTypeElement = PopoverContentImplElement;\ninterface PopoverContentTypeProps\n  extends Omit<PopoverContentImplProps, 'trapFocus' | 'disableOutsidePointerEvents'> {}\n\nconst PopoverContentModal = React.forwardRef<PopoverContentTypeElement, PopoverContentTypeProps>(\n  (props: ScopedProps<PopoverContentTypeProps>, forwardedRef) => {\n    const context = usePopoverContext(CONTENT_NAME, props.__scopePopover);\n    const contentRef = React.useRef<HTMLDivElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, contentRef);\n    const isRightClickOutsideRef = React.useRef(false);\n\n    // aria-hide everything except the content (better supported equivalent to setting aria-modal)\n    React.useEffect(() => {\n      const content = contentRef.current;\n      if (content) return hideOthers(content);\n    }, []);\n\n    return (\n      <RemoveScroll as={Slot} allowPinchZoom>\n        <PopoverContentImpl\n          {...props}\n          ref={composedRefs}\n          // we make sure we're not trapping once it's been closed\n          // (closed !== unmounted when animating out)\n          trapFocus={context.open}\n          disableOutsidePointerEvents\n          onCloseAutoFocus={composeEventHandlers(props.onCloseAutoFocus, (event) => {\n            event.preventDefault();\n            if (!isRightClickOutsideRef.current) context.triggerRef.current?.focus();\n          })}\n          onPointerDownOutside={composeEventHandlers(\n            props.onPointerDownOutside,\n            (event) => {\n              const originalEvent = event.detail.originalEvent;\n              const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;\n              const isRightClick = originalEvent.button === 2 || ctrlLeftClick;\n\n              isRightClickOutsideRef.current = isRightClick;\n            },\n            { checkForDefaultPrevented: false }\n          )}\n          // When focus is trapped, a `focusout` event may still happen.\n          // We make sure we don't trigger our `onDismiss` in such case.\n          onFocusOutside={composeEventHandlers(\n            props.onFocusOutside,\n            (event) => event.preventDefault(),\n            { checkForDefaultPrevented: false }\n          )}\n        />\n      </RemoveScroll>\n    );\n  }\n);\n\nconst PopoverContentNonModal = React.forwardRef<PopoverContentTypeElement, PopoverContentTypeProps>(\n  (props: ScopedProps<PopoverContentTypeProps>, forwardedRef) => {\n    const context = usePopoverContext(CONTENT_NAME, props.__scopePopover);\n    const hasInteractedOutsideRef = React.useRef(false);\n    const hasPointerDownOutsideRef = React.useRef(false);\n\n    return (\n      <PopoverContentImpl\n        {...props}\n        ref={forwardedRef}\n        trapFocus={false}\n        disableOutsidePointerEvents={false}\n        onCloseAutoFocus={(event) => {\n          props.onCloseAutoFocus?.(event);\n\n          if (!event.defaultPrevented) {\n            if (!hasInteractedOutsideRef.current) context.triggerRef.current?.focus();\n            // Always prevent auto focus because we either focus manually or want user agent focus\n            event.preventDefault();\n          }\n\n          hasInteractedOutsideRef.current = false;\n          hasPointerDownOutsideRef.current = false;\n        }}\n        onInteractOutside={(event) => {\n          props.onInteractOutside?.(event);\n\n          if (!event.defaultPrevented) {\n            hasInteractedOutsideRef.current = true;\n            if (event.detail.originalEvent.type === 'pointerdown') {\n              hasPointerDownOutsideRef.current = true;\n            }\n          }\n\n          // Prevent dismissing when clicking the trigger.\n          // As the trigger is already setup to close, without doing so would\n          // cause it to close and immediately open.\n          const target = event.target as HTMLElement;\n          const targetIsTrigger = context.triggerRef.current?.contains(target);\n          if (targetIsTrigger) event.preventDefault();\n\n          // On Safari if the trigger is inside a container with tabIndex={0}, when clicked\n          // we will get the pointer down outside event on the trigger, but then a subsequent\n          // focus outside event on the container, we ignore any focus outside event when we've\n          // already had a pointer down outside event.\n          if (event.detail.originalEvent.type === 'focusin' && hasPointerDownOutsideRef.current) {\n            event.preventDefault();\n          }\n        }}\n      />\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype PopoverContentImplElement = React.ComponentRef<typeof PopperPrimitive.Content>;\ntype FocusScopeProps = React.ComponentPropsWithoutRef<typeof FocusScope>;\ntype DismissableLayerProps = React.ComponentPropsWithoutRef<typeof DismissableLayer>;\ntype PopperContentProps = React.ComponentPropsWithoutRef<typeof PopperPrimitive.Content>;\ninterface PopoverContentImplProps\n  extends Omit<PopperContentProps, 'onPlaced'>,\n    Omit<DismissableLayerProps, 'onDismiss'> {\n  /**\n   * Whether focus should be trapped within the `Popover`\n   * (default: false)\n   */\n  trapFocus?: FocusScopeProps['trapped'];\n\n  /**\n   * Event handler called when auto-focusing on open.\n   * Can be prevented.\n   */\n  onOpenAutoFocus?: FocusScopeProps['onMountAutoFocus'];\n\n  /**\n   * Event handler called when auto-focusing on close.\n   * Can be prevented.\n   */\n  onCloseAutoFocus?: FocusScopeProps['onUnmountAutoFocus'];\n}\n\nconst PopoverContentImpl = React.forwardRef<PopoverContentImplElement, PopoverContentImplProps>(\n  (props: ScopedProps<PopoverContentImplProps>, forwardedRef) => {\n    const {\n      __scopePopover,\n      trapFocus,\n      onOpenAutoFocus,\n      onCloseAutoFocus,\n      disableOutsidePointerEvents,\n      onEscapeKeyDown,\n      onPointerDownOutside,\n      onFocusOutside,\n      onInteractOutside,\n      ...contentProps\n    } = props;\n    const context = usePopoverContext(CONTENT_NAME, __scopePopover);\n    const popperScope = usePopperScope(__scopePopover);\n\n    // Make sure the whole tree has focus guards as our `Popover` may be\n    // the last element in the DOM (because of the `Portal`)\n    useFocusGuards();\n\n    return (\n      <FocusScope\n        asChild\n        loop\n        trapped={trapFocus}\n        onMountAutoFocus={onOpenAutoFocus}\n        onUnmountAutoFocus={onCloseAutoFocus}\n      >\n        <DismissableLayer\n          asChild\n          disableOutsidePointerEvents={disableOutsidePointerEvents}\n          onInteractOutside={onInteractOutside}\n          onEscapeKeyDown={onEscapeKeyDown}\n          onPointerDownOutside={onPointerDownOutside}\n          onFocusOutside={onFocusOutside}\n          onDismiss={() => context.onOpenChange(false)}\n        >\n          <PopperPrimitive.Content\n            data-state={getState(context.open)}\n            role=\"dialog\"\n            id={context.contentId}\n            {...popperScope}\n            {...contentProps}\n            ref={forwardedRef}\n            style={{\n              ...contentProps.style,\n              // re-namespace exposed content custom properties\n              ...{\n                '--radix-popover-content-transform-origin': 'var(--radix-popper-transform-origin)',\n                '--radix-popover-content-available-width': 'var(--radix-popper-available-width)',\n                '--radix-popover-content-available-height': 'var(--radix-popper-available-height)',\n                '--radix-popover-trigger-width': 'var(--radix-popper-anchor-width)',\n                '--radix-popover-trigger-height': 'var(--radix-popper-anchor-height)',\n              },\n            }}\n          />\n        </DismissableLayer>\n      </FocusScope>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * PopoverClose\n * -----------------------------------------------------------------------------------------------*/\n\nconst CLOSE_NAME = 'PopoverClose';\n\ntype PopoverCloseElement = React.ComponentRef<typeof Primitive.button>;\ninterface PopoverCloseProps extends PrimitiveButtonProps {}\n\nconst PopoverClose = React.forwardRef<PopoverCloseElement, PopoverCloseProps>(\n  (props: ScopedProps<PopoverCloseProps>, forwardedRef) => {\n    const { __scopePopover, ...closeProps } = props;\n    const context = usePopoverContext(CLOSE_NAME, __scopePopover);\n    return (\n      <Primitive.button\n        type=\"button\"\n        {...closeProps}\n        ref={forwardedRef}\n        onClick={composeEventHandlers(props.onClick, () => context.onOpenChange(false))}\n      />\n    );\n  }\n);\n\nPopoverClose.displayName = CLOSE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PopoverArrow\n * -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_NAME = 'PopoverArrow';\n\ntype PopoverArrowElement = React.ComponentRef<typeof PopperPrimitive.Arrow>;\ntype PopperArrowProps = React.ComponentPropsWithoutRef<typeof PopperPrimitive.Arrow>;\ninterface PopoverArrowProps extends PopperArrowProps {}\n\nconst PopoverArrow = React.forwardRef<PopoverArrowElement, PopoverArrowProps>(\n  (props: ScopedProps<PopoverArrowProps>, forwardedRef) => {\n    const { __scopePopover, ...arrowProps } = props;\n    const popperScope = usePopperScope(__scopePopover);\n    return <PopperPrimitive.Arrow {...popperScope} {...arrowProps} ref={forwardedRef} />;\n  }\n);\n\nPopoverArrow.displayName = ARROW_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nconst Root = Popover;\nconst Anchor = PopoverAnchor;\nconst Trigger = PopoverTrigger;\nconst Portal = PopoverPortal;\nconst Content = PopoverContent;\nconst Close = PopoverClose;\nconst Arrow = PopoverArrow;\n\nexport {\n  createPopoverScope,\n  //\n  Popover,\n  PopoverAnchor,\n  PopoverTrigger,\n  PopoverPortal,\n  PopoverContent,\n  PopoverClose,\n  PopoverArrow,\n  //\n  Root,\n  Anchor,\n  Trigger,\n  Portal,\n  Content,\n  Close,\n  Arrow,\n};\nexport type {\n  PopoverProps,\n  PopoverAnchorProps,\n  PopoverTriggerProps,\n  PopoverPortalProps,\n  PopoverContentProps,\n  PopoverCloseProps,\n  PopoverArrowProps,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}