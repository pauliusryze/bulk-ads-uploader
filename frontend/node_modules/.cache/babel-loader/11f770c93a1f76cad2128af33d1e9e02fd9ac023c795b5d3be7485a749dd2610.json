{"ast":null,"code":"import { useState } from \"react\";\nimport { calculateFocusTarget } from \"./helpers/calculateFocusTarget.js\";\nimport { getNextFocus } from \"./helpers/getNextFocus.js\";\n/**\n * Manages focus behavior for the DayPicker component, including setting,\n * moving, and blurring focus on calendar days.\n *\n * @template T - The type of DayPicker props.\n * @param props - The DayPicker props.\n * @param calendar - The calendar object containing the displayed days and\n *   months.\n * @param getModifiers - A function to retrieve modifiers for a given day.\n * @param isSelected - A function to check if a date is selected.\n * @param dateLib - The date utility library instance.\n * @returns An object containing focus-related methods and the currently focused\n *   day.\n */\nexport function useFocus(props, calendar, getModifiers, isSelected, dateLib) {\n  const {\n    autoFocus\n  } = props;\n  const [lastFocused, setLastFocused] = useState();\n  const focusTarget = calculateFocusTarget(calendar.days, getModifiers, isSelected || (() => false), lastFocused);\n  const [focusedDay, setFocused] = useState(autoFocus ? focusTarget : undefined);\n  const blur = () => {\n    setLastFocused(focusedDay);\n    setFocused(undefined);\n  };\n  const moveFocus = (moveBy, moveDir) => {\n    if (!focusedDay) return;\n    const nextFocus = getNextFocus(moveBy, moveDir, focusedDay, calendar.navStart, calendar.navEnd, props, dateLib);\n    if (!nextFocus) return;\n    calendar.goToDay(nextFocus);\n    setFocused(nextFocus);\n  };\n  const isFocusTarget = day => {\n    return Boolean(focusTarget?.isEqualTo(day));\n  };\n  const useFocus = {\n    isFocusTarget,\n    setFocused,\n    focused: focusedDay,\n    blur,\n    moveFocus\n  };\n  return useFocus;\n}","map":{"version":3,"names":["useState","calculateFocusTarget","getNextFocus","useFocus","props","calendar","getModifiers","isSelected","dateLib","autoFocus","lastFocused","setLastFocused","focusTarget","days","focusedDay","setFocused","undefined","blur","moveFocus","moveBy","moveDir","nextFocus","navStart","navEnd","goToDay","isFocusTarget","day","Boolean","isEqualTo","focused"],"sources":["/Users/paulius/Downloads/Projects/Meta Ads Uploader/frontend/node_modules/react-day-picker/src/useFocus.ts"],"sourcesContent":["import { useState } from \"react\";\n\nimport type { CalendarDay, DateLib } from \"./classes/index.js\";\nimport { calculateFocusTarget } from \"./helpers/calculateFocusTarget.js\";\nimport { getNextFocus } from \"./helpers/getNextFocus.js\";\nimport type {\n  MoveFocusBy,\n  MoveFocusDir,\n  DayPickerProps,\n  Modifiers\n} from \"./types/index.js\";\nimport { Calendar } from \"./useCalendar.js\";\n\nexport type UseFocus = {\n  /** The date that is currently focused. */\n  focused: CalendarDay | undefined;\n\n  /** Check if the given day is the focus target when entering the calendar. */\n  isFocusTarget: (day: CalendarDay) => boolean;\n\n  /** Focus the given day. */\n  setFocused: (day: CalendarDay | undefined) => void;\n\n  /** Blur the focused day. */\n  blur: () => void;\n\n  /** Move the current focus to the next day according to the given direction. */\n  moveFocus: (moveBy: MoveFocusBy, moveDir: MoveFocusDir) => void;\n};\n\n/**\n * Manages focus behavior for the DayPicker component, including setting,\n * moving, and blurring focus on calendar days.\n *\n * @template T - The type of DayPicker props.\n * @param props - The DayPicker props.\n * @param calendar - The calendar object containing the displayed days and\n *   months.\n * @param getModifiers - A function to retrieve modifiers for a given day.\n * @param isSelected - A function to check if a date is selected.\n * @param dateLib - The date utility library instance.\n * @returns An object containing focus-related methods and the currently focused\n *   day.\n */\nexport function useFocus<T extends DayPickerProps>(\n  props: T,\n  calendar: Calendar,\n  getModifiers: (day: CalendarDay) => Modifiers,\n  isSelected: (date: Date) => boolean,\n  dateLib: DateLib\n): UseFocus {\n  const { autoFocus } = props;\n  const [lastFocused, setLastFocused] = useState<CalendarDay | undefined>();\n\n  const focusTarget = calculateFocusTarget(\n    calendar.days,\n    getModifiers,\n    isSelected || (() => false),\n    lastFocused\n  );\n  const [focusedDay, setFocused] = useState<CalendarDay | undefined>(\n    autoFocus ? focusTarget : undefined\n  );\n\n  const blur = () => {\n    setLastFocused(focusedDay);\n    setFocused(undefined);\n  };\n\n  const moveFocus = (moveBy: MoveFocusBy, moveDir: MoveFocusDir) => {\n    if (!focusedDay) return;\n    const nextFocus = getNextFocus(\n      moveBy,\n      moveDir,\n      focusedDay,\n      calendar.navStart,\n      calendar.navEnd,\n      props,\n      dateLib\n    );\n    if (!nextFocus) return;\n\n    calendar.goToDay(nextFocus);\n    setFocused(nextFocus);\n  };\n\n  const isFocusTarget = (day: CalendarDay) => {\n    return Boolean(focusTarget?.isEqualTo(day));\n  };\n\n  const useFocus: UseFocus = {\n    isFocusTarget,\n    setFocused,\n    focused: focusedDay,\n    blur,\n    moveFocus\n  };\n\n  return useFocus;\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,OAAO;AAGhC,SAASC,oBAAoB,QAAQ,mCAAmC;AACxE,SAASC,YAAY,QAAQ,2BAA2B;AA0BxD;;;;;;;;;;;;;;AAcA,OAAM,SAAUC,QAAQA,CACtBC,KAAQ,EACRC,QAAkB,EAClBC,YAA6C,EAC7CC,UAAmC,EACnCC,OAAgB;EAEhB,MAAM;IAAEC;EAAS,CAAE,GAAGL,KAAK;EAC3B,MAAM,CAACM,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,EAA2B;EAEzE,MAAMY,WAAW,GAAGX,oBAAoB,CACtCI,QAAQ,CAACQ,IAAI,EACbP,YAAY,EACZC,UAAU,KAAK,MAAM,KAAK,CAAC,EAC3BG,WAAW,CACZ;EACD,MAAM,CAACI,UAAU,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CACvCS,SAAS,GAAGG,WAAW,GAAGI,SAAS,CACpC;EAED,MAAMC,IAAI,GAAGA,CAAA,KAAK;IAChBN,cAAc,CAACG,UAAU,CAAC;IAC1BC,UAAU,CAACC,SAAS,CAAC;EACvB,CAAC;EAED,MAAME,SAAS,GAAGA,CAACC,MAAmB,EAAEC,OAAqB,KAAI;IAC/D,IAAI,CAACN,UAAU,EAAE;IACjB,MAAMO,SAAS,GAAGnB,YAAY,CAC5BiB,MAAM,EACNC,OAAO,EACPN,UAAU,EACVT,QAAQ,CAACiB,QAAQ,EACjBjB,QAAQ,CAACkB,MAAM,EACfnB,KAAK,EACLI,OAAO,CACR;IACD,IAAI,CAACa,SAAS,EAAE;IAEhBhB,QAAQ,CAACmB,OAAO,CAACH,SAAS,CAAC;IAC3BN,UAAU,CAACM,SAAS,CAAC;EACvB,CAAC;EAED,MAAMI,aAAa,GAAIC,GAAgB,IAAI;IACzC,OAAOC,OAAO,CAACf,WAAW,EAAEgB,SAAS,CAACF,GAAG,CAAC,CAAC;EAC7C,CAAC;EAED,MAAMvB,QAAQ,GAAa;IACzBsB,aAAa;IACbV,UAAU;IACVc,OAAO,EAAEf,UAAU;IACnBG,IAAI;IACJC;GACD;EAED,OAAOf,QAAQ;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}