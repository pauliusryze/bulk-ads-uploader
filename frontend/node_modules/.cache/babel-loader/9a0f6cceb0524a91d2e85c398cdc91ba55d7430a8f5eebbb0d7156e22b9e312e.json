{"ast":null,"code":"// Facebook Marketing API Client\n\nclass FacebookAPIClient {\n  constructor(config) {\n    this.config = void 0;\n    this.baseUrl = 'https://graph.facebook.com/v18.0';\n    this.isDevelopmentMode = void 0;\n    this.config = config;\n    this.isDevelopmentMode = process.env.NODE_ENV === 'development' && typeof window !== 'undefined' && window.location.protocol === 'http:';\n  }\n  async request(endpoint, options = {}) {\n    // In development mode, return mock data\n    if (this.isDevelopmentMode) {\n      return this.getMockData(endpoint);\n    }\n    const url = `${this.baseUrl}${endpoint}`;\n    const params = new URLSearchParams({\n      access_token: this.config.accessToken\n    });\n    const response = await fetch(`${url}?${params}`, {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      }\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error.message);\n    }\n    return response.json();\n  }\n\n  // Mock data for development mode\n  getMockData(endpoint) {\n    console.log('Development mode: Using mock data for', endpoint);\n    if (endpoint.includes('/me/adaccounts')) {\n      return {\n        data: [{\n          id: 'act_123456789',\n          name: 'Test Ad Account',\n          currency: 'USD',\n          timezone: 'America/New_York'\n        }, {\n          id: 'act_987654321',\n          name: 'Another Ad Account',\n          currency: 'EUR',\n          timezone: 'Europe/London'\n        }]\n      };\n    }\n    if (endpoint.includes('/me/accounts')) {\n      return {\n        data: [{\n          id: '123456789',\n          name: 'Test Page',\n          category: 'Business',\n          access_token: 'mock-page-token'\n        }, {\n          id: '987654321',\n          name: 'Another Page',\n          category: 'Entertainment',\n          access_token: 'mock-page-token-2'\n        }]\n      };\n    }\n    if (endpoint.includes('/customaudiences')) {\n      return {\n        data: [{\n          id: '123456789',\n          name: 'Test Audience',\n          subtype: 'CUSTOM',\n          approximate_count: 1000\n        }, {\n          id: '987654321',\n          name: 'Another Audience',\n          subtype: 'LOOKALIKE',\n          approximate_count: 5000\n        }]\n      };\n    }\n    if (endpoint.includes('/campaigns')) {\n      return {\n        id: 'campaign_123456789'\n      };\n    }\n    if (endpoint.includes('/adsets')) {\n      return {\n        id: 'adset_123456789'\n      };\n    }\n    if (endpoint.includes('/adcreatives')) {\n      return {\n        id: 'creative_123456789'\n      };\n    }\n    if (endpoint.includes('/ads')) {\n      return {\n        id: 'ad_123456789'\n      };\n    }\n    if (endpoint.includes('/adimages')) {\n      return {\n        id: 'image_123456789',\n        hash: 'mock_image_hash'\n      };\n    }\n    if (endpoint.includes('/generatepreviews')) {\n      return {\n        body: '<div style=\"background: #f0f0f0; padding: 20px; border: 1px solid #ccc;\"><h3>Mock Ad Preview</h3><p>This is a mock preview of your ad. In production, this would show the actual Facebook ad preview.</p></div>'\n      };\n    }\n    if (endpoint.includes('/previews')) {\n      return {\n        data: [{\n          body: '<div style=\"background: #f0f0f0; padding: 20px; border: 1px solid #ccc;\"><h3>Mock Ad Preview</h3><p>This is a mock preview of your ad. In production, this would show the actual Facebook ad preview.</p></div>'\n        }]\n      };\n    }\n\n    // Default mock response\n    return {\n      success: true,\n      message: 'Mock response'\n    };\n  }\n\n  // Get user's ad accounts\n  async getAdAccounts() {\n    return this.request(`/me/adaccounts`);\n  }\n\n  // Get user's pages\n  async getPages() {\n    return this.request(`/me/accounts`);\n  }\n\n  // Get custom audiences for ad account\n  async getCustomAudiences(adAccountId) {\n    return this.request(`/${adAccountId}/customaudiences`);\n  }\n\n  // Upload media to Facebook\n  async uploadMedia(adAccountId, file) {\n    const formData = new FormData();\n    formData.append('source', file);\n    formData.append('access_token', this.config.accessToken);\n    const response = await fetch(`${this.baseUrl}/${adAccountId}/adimages`, {\n      method: 'POST',\n      body: formData\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error.message);\n    }\n    return response.json();\n  }\n\n  // Create campaign\n  async createCampaign(adAccountId, data) {\n    return this.request(`/${adAccountId}/campaigns`, {\n      method: 'POST',\n      body: JSON.stringify(data)\n    });\n  }\n\n  // Create ad set\n  async createAdSet(adAccountId, data) {\n    return this.request(`/${adAccountId}/adsets`, {\n      method: 'POST',\n      body: JSON.stringify(data)\n    });\n  }\n\n  // Create ad creative\n  async createAdCreative(adAccountId, data) {\n    return this.request(`/${adAccountId}/adcreatives`, {\n      method: 'POST',\n      body: JSON.stringify(data)\n    });\n  }\n\n  // Create ad\n  async createAd(adAccountId, data) {\n    return this.request(`/${adAccountId}/ads`, {\n      method: 'POST',\n      body: JSON.stringify(data)\n    });\n  }\n\n  // Generate ad preview\n  async generateAdPreview(adAccountId, creativeSpec, adFormat) {\n    return this.request(`/${adAccountId}/generatepreviews`, {\n      method: 'POST',\n      body: JSON.stringify({\n        creative: creativeSpec,\n        ad_format: adFormat\n      })\n    });\n  }\n\n  // Get ad preview by ad ID\n  async getAdPreview(adId) {\n    return this.request(`/${adId}/previews`);\n  }\n\n  // Update ad status\n  async updateAdStatus(adId, status) {\n    await this.request(`/${adId}`, {\n      method: 'POST',\n      body: JSON.stringify({\n        status\n      })\n    });\n  }\n\n  // Delete ad\n  async deleteAd(adId) {\n    await this.request(`/${adId}`, {\n      method: 'DELETE'\n    });\n  }\n}\nexport default FacebookAPIClient;","map":{"version":3,"names":["FacebookAPIClient","constructor","config","baseUrl","isDevelopmentMode","process","env","NODE_ENV","window","location","protocol","request","endpoint","options","getMockData","url","params","URLSearchParams","access_token","accessToken","response","fetch","headers","ok","error","json","Error","message","console","log","includes","data","id","name","currency","timezone","category","subtype","approximate_count","hash","body","success","getAdAccounts","getPages","getCustomAudiences","adAccountId","uploadMedia","file","formData","FormData","append","method","createCampaign","JSON","stringify","createAdSet","createAdCreative","createAd","generateAdPreview","creativeSpec","adFormat","creative","ad_format","getAdPreview","adId","updateAdStatus","status","deleteAd"],"sources":["/Users/paulius/Downloads/Projects/Meta Ads Uploader/frontend/src/lib/facebook-api.ts"],"sourcesContent":["// Facebook Marketing API Client\nexport interface FacebookAPIConfig {\n  appId: string;\n  accessToken: string;\n  adAccountId: string;\n  pageId?: string;\n  sandboxMode: boolean;\n}\n\nexport interface FacebookCampaignData {\n  name: string;\n  objective: 'LINK_CLICKS' | 'CONVERSIONS' | 'REACH' | 'BRAND_AWARENESS' | 'VIDEO_VIEWS';\n  status: 'PAUSED' | 'ACTIVE';\n  special_ad_categories?: string[];\n}\n\nexport interface FacebookAdSetData {\n  name: string;\n  campaign_id: string;\n  daily_budget: number;\n  billing_event: 'IMPRESSIONS' | 'LINK_CLICKS';\n  optimization_goal: 'LINK_CLICKS' | 'CONVERSIONS' | 'REACH' | 'BRAND_AWARENESS' | 'VIDEO_VIEWS';\n  targeting: {\n    age_min?: number;\n    age_max?: number;\n    genders?: number[];\n    geo_locations?: {\n      countries?: string[];\n      regions?: string[];\n      cities?: string[];\n    };\n    custom_audiences?: Array<{ id: string }>;\n    interests?: Array<{ id: string }>;\n  };\n  status: 'PAUSED' | 'ACTIVE';\n  bid_amount?: number;\n}\n\nexport interface FacebookCreativeData {\n  name: string;\n  object_story_spec: {\n    page_id: string;\n    link_data?: {\n      message: string;\n      link: string;\n      call_to_action?: {\n        type: 'SHOP_NOW' | 'LEARN_MORE' | 'SIGN_UP' | 'BOOK_NOW' | 'CONTACT_US';\n        value: {\n          link: string;\n        };\n      };\n    };\n    video_data?: {\n      video_id: string;\n      message: string;\n      call_to_action?: {\n        type: 'SHOP_NOW' | 'LEARN_MORE' | 'SIGN_UP' | 'BOOK_NOW' | 'CONTACT_US';\n        value: {\n          link: string;\n        };\n      };\n    };\n  };\n}\n\nexport interface FacebookAdData {\n  name: string;\n  adset_id: string;\n  creative: {\n    creative_id: string;\n  };\n  status: 'PAUSED' | 'ACTIVE';\n}\n\nexport interface FacebookAPIError {\n  error: {\n    code: number;\n    message: string;\n    error_subcode?: number;\n    error_user_title?: string;\n    error_user_msg?: string;\n  };\n}\n\nexport interface FacebookAdAccount {\n  id: string;\n  name: string;\n  currency: string;\n  timezone: string;\n  business_name?: string;\n}\n\nexport interface FacebookPage {\n  id: string;\n  name: string;\n  category: string;\n  access_token: string;\n}\n\nexport interface FacebookCustomAudience {\n  id: string;\n  name: string;\n  subtype: string;\n  approximate_count?: number;\n}\n\nclass FacebookAPIClient {\n  private config: FacebookAPIConfig;\n  private baseUrl = 'https://graph.facebook.com/v18.0';\n  private isDevelopmentMode: boolean;\n\n  constructor(config: FacebookAPIConfig) {\n    this.config = config;\n    this.isDevelopmentMode = process.env.NODE_ENV === 'development' && \n      (typeof window !== 'undefined' && window.location.protocol === 'http:');\n  }\n\n  private async request<T>(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<T> {\n    // In development mode, return mock data\n    if (this.isDevelopmentMode) {\n      return this.getMockData<T>(endpoint);\n    }\n\n    const url = `${this.baseUrl}${endpoint}`;\n    const params = new URLSearchParams({\n      access_token: this.config.accessToken,\n    });\n\n    const response = await fetch(`${url}?${params}`, {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n    });\n\n    if (!response.ok) {\n      const error: FacebookAPIError = await response.json();\n      throw new Error(error.error.message);\n    }\n\n    return response.json();\n  }\n\n  // Mock data for development mode\n  private getMockData<T>(endpoint: string): T {\n    console.log('Development mode: Using mock data for', endpoint);\n    \n    if (endpoint.includes('/me/adaccounts')) {\n      return {\n        data: [\n          { id: 'act_123456789', name: 'Test Ad Account', currency: 'USD', timezone: 'America/New_York' },\n          { id: 'act_987654321', name: 'Another Ad Account', currency: 'EUR', timezone: 'Europe/London' }\n        ]\n      } as T;\n    }\n    \n    if (endpoint.includes('/me/accounts')) {\n      return {\n        data: [\n          { id: '123456789', name: 'Test Page', category: 'Business', access_token: 'mock-page-token' },\n          { id: '987654321', name: 'Another Page', category: 'Entertainment', access_token: 'mock-page-token-2' }\n        ]\n      } as T;\n    }\n    \n    if (endpoint.includes('/customaudiences')) {\n      return {\n        data: [\n          { id: '123456789', name: 'Test Audience', subtype: 'CUSTOM', approximate_count: 1000 },\n          { id: '987654321', name: 'Another Audience', subtype: 'LOOKALIKE', approximate_count: 5000 }\n        ]\n      } as T;\n    }\n    \n    if (endpoint.includes('/campaigns')) {\n      return { id: 'campaign_123456789' } as T;\n    }\n    \n    if (endpoint.includes('/adsets')) {\n      return { id: 'adset_123456789' } as T;\n    }\n    \n    if (endpoint.includes('/adcreatives')) {\n      return { id: 'creative_123456789' } as T;\n    }\n    \n    if (endpoint.includes('/ads')) {\n      return { id: 'ad_123456789' } as T;\n    }\n    \n    if (endpoint.includes('/adimages')) {\n      return { id: 'image_123456789', hash: 'mock_image_hash' } as T;\n    }\n    \n    if (endpoint.includes('/generatepreviews')) {\n      return { body: '<div style=\"background: #f0f0f0; padding: 20px; border: 1px solid #ccc;\"><h3>Mock Ad Preview</h3><p>This is a mock preview of your ad. In production, this would show the actual Facebook ad preview.</p></div>' } as T;\n    }\n    \n    if (endpoint.includes('/previews')) {\n      return { \n        data: [{ \n          body: '<div style=\"background: #f0f0f0; padding: 20px; border: 1px solid #ccc;\"><h3>Mock Ad Preview</h3><p>This is a mock preview of your ad. In production, this would show the actual Facebook ad preview.</p></div>' \n        }] \n      } as T;\n    }\n    \n    // Default mock response\n    return { success: true, message: 'Mock response' } as T;\n  }\n\n  // Get user's ad accounts\n  async getAdAccounts(): Promise<{ data: FacebookAdAccount[] }> {\n    return this.request(`/me/adaccounts`);\n  }\n\n  // Get user's pages\n  async getPages(): Promise<{ data: FacebookPage[] }> {\n    return this.request(`/me/accounts`);\n  }\n\n  // Get custom audiences for ad account\n  async getCustomAudiences(adAccountId: string): Promise<{ data: FacebookCustomAudience[] }> {\n    return this.request(`/${adAccountId}/customaudiences`);\n  }\n\n  // Upload media to Facebook\n  async uploadMedia(adAccountId: string, file: File): Promise<{ id: string; hash: string }> {\n    const formData = new FormData();\n    formData.append('source', file);\n    formData.append('access_token', this.config.accessToken);\n\n    const response = await fetch(`${this.baseUrl}/${adAccountId}/adimages`, {\n      method: 'POST',\n      body: formData,\n    });\n\n    if (!response.ok) {\n      const error: FacebookAPIError = await response.json();\n      throw new Error(error.error.message);\n    }\n\n    return response.json();\n  }\n\n  // Create campaign\n  async createCampaign(adAccountId: string, data: FacebookCampaignData): Promise<{ id: string }> {\n    return this.request(`/${adAccountId}/campaigns`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n  // Create ad set\n  async createAdSet(adAccountId: string, data: FacebookAdSetData): Promise<{ id: string }> {\n    return this.request(`/${adAccountId}/adsets`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n  // Create ad creative\n  async createAdCreative(adAccountId: string, data: FacebookCreativeData): Promise<{ id: string }> {\n    return this.request(`/${adAccountId}/adcreatives`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n  // Create ad\n  async createAd(adAccountId: string, data: FacebookAdData): Promise<{ id: string }> {\n    return this.request(`/${adAccountId}/ads`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n  // Generate ad preview\n  async generateAdPreview(adAccountId: string, creativeSpec: any, adFormat: string): Promise<{ body: string }> {\n    return this.request(`/${adAccountId}/generatepreviews`, {\n      method: 'POST',\n      body: JSON.stringify({\n        creative: creativeSpec,\n        ad_format: adFormat,\n      }),\n    });\n  }\n\n  // Get ad preview by ad ID\n  async getAdPreview(adId: string): Promise<{ data: Array<{ body: string }> }> {\n    return this.request(`/${adId}/previews`);\n  }\n\n  // Update ad status\n  async updateAdStatus(adId: string, status: 'PAUSED' | 'ACTIVE'): Promise<void> {\n    await this.request(`/${adId}`, {\n      method: 'POST',\n      body: JSON.stringify({ status }),\n    });\n  }\n\n  // Delete ad\n  async deleteAd(adId: string): Promise<void> {\n    await this.request(`/${adId}`, {\n      method: 'DELETE',\n    });\n  }\n}\n\nexport default FacebookAPIClient; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}