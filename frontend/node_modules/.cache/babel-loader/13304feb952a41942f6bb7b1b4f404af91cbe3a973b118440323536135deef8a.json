{"ast":null,"code":"import { DayFlag } from \"../UI.js\";\nvar FocusTargetPriority;\n(function (FocusTargetPriority) {\n  FocusTargetPriority[FocusTargetPriority[\"Today\"] = 0] = \"Today\";\n  FocusTargetPriority[FocusTargetPriority[\"Selected\"] = 1] = \"Selected\";\n  FocusTargetPriority[FocusTargetPriority[\"LastFocused\"] = 2] = \"LastFocused\";\n  FocusTargetPriority[FocusTargetPriority[\"FocusedModifier\"] = 3] = \"FocusedModifier\";\n})(FocusTargetPriority || (FocusTargetPriority = {}));\n/**\n * Determines if a day is focusable based on its modifiers.\n *\n * A day is considered focusable if it is not disabled, hidden, or outside the\n * displayed month.\n *\n * @param modifiers The modifiers applied to the day.\n * @returns `true` if the day is focusable, otherwise `false`.\n */\nfunction isFocusableDay(modifiers) {\n  return !modifiers[DayFlag.disabled] && !modifiers[DayFlag.hidden] && !modifiers[DayFlag.outside];\n}\n/**\n * Calculates the focus target day based on priority.\n *\n * This function determines the day that should receive focus in the calendar,\n * prioritizing days with specific modifiers (e.g., \"focused\", \"today\") or\n * selection states.\n *\n * @param days The array of `CalendarDay` objects to evaluate.\n * @param getModifiers A function to retrieve the modifiers for a given day.\n * @param isSelected A function to determine if a day is selected.\n * @param lastFocused The last focused day, if any.\n * @returns The `CalendarDay` that should receive focus, or `undefined` if no\n *   focusable day is found.\n */\nexport function calculateFocusTarget(days, getModifiers, isSelected, lastFocused) {\n  let focusTarget;\n  let foundFocusTargetPriority = -1;\n  for (const day of days) {\n    const modifiers = getModifiers(day);\n    if (isFocusableDay(modifiers)) {\n      if (modifiers[DayFlag.focused] && foundFocusTargetPriority < FocusTargetPriority.FocusedModifier) {\n        focusTarget = day;\n        foundFocusTargetPriority = FocusTargetPriority.FocusedModifier;\n      } else if (lastFocused?.isEqualTo(day) && foundFocusTargetPriority < FocusTargetPriority.LastFocused) {\n        focusTarget = day;\n        foundFocusTargetPriority = FocusTargetPriority.LastFocused;\n      } else if (isSelected(day.date) && foundFocusTargetPriority < FocusTargetPriority.Selected) {\n        focusTarget = day;\n        foundFocusTargetPriority = FocusTargetPriority.Selected;\n      } else if (modifiers[DayFlag.today] && foundFocusTargetPriority < FocusTargetPriority.Today) {\n        focusTarget = day;\n        foundFocusTargetPriority = FocusTargetPriority.Today;\n      }\n    }\n  }\n  if (!focusTarget) {\n    // Return the first day that is focusable\n    focusTarget = days.find(day => isFocusableDay(getModifiers(day)));\n  }\n  return focusTarget;\n}","map":{"version":3,"names":["DayFlag","FocusTargetPriority","isFocusableDay","modifiers","disabled","hidden","outside","calculateFocusTarget","days","getModifiers","isSelected","lastFocused","focusTarget","foundFocusTargetPriority","day","focused","FocusedModifier","isEqualTo","LastFocused","date","Selected","today","Today","find"],"sources":["/Users/paulius/Downloads/Projects/Meta Ads Uploader/frontend/node_modules/react-day-picker/src/helpers/calculateFocusTarget.ts"],"sourcesContent":["import { DayFlag } from \"../UI.js\";\nimport type { CalendarDay } from \"../classes/index.js\";\nimport type { Modifiers } from \"../types/index.js\";\n\nenum FocusTargetPriority {\n  Today = 0,\n  Selected,\n  LastFocused,\n  FocusedModifier\n}\n\n/**\n * Determines if a day is focusable based on its modifiers.\n *\n * A day is considered focusable if it is not disabled, hidden, or outside the\n * displayed month.\n *\n * @param modifiers The modifiers applied to the day.\n * @returns `true` if the day is focusable, otherwise `false`.\n */\nfunction isFocusableDay(modifiers: Modifiers) {\n  return (\n    !modifiers[DayFlag.disabled] &&\n    !modifiers[DayFlag.hidden] &&\n    !modifiers[DayFlag.outside]\n  );\n}\n\n/**\n * Calculates the focus target day based on priority.\n *\n * This function determines the day that should receive focus in the calendar,\n * prioritizing days with specific modifiers (e.g., \"focused\", \"today\") or\n * selection states.\n *\n * @param days The array of `CalendarDay` objects to evaluate.\n * @param getModifiers A function to retrieve the modifiers for a given day.\n * @param isSelected A function to determine if a day is selected.\n * @param lastFocused The last focused day, if any.\n * @returns The `CalendarDay` that should receive focus, or `undefined` if no\n *   focusable day is found.\n */\nexport function calculateFocusTarget(\n  days: CalendarDay[],\n  getModifiers: (day: CalendarDay) => Modifiers,\n  isSelected: (date: Date) => boolean,\n  lastFocused: CalendarDay | undefined\n): CalendarDay | undefined {\n  let focusTarget: CalendarDay | undefined;\n\n  let foundFocusTargetPriority: FocusTargetPriority | -1 = -1;\n  for (const day of days) {\n    const modifiers = getModifiers(day);\n\n    if (isFocusableDay(modifiers)) {\n      if (\n        modifiers[DayFlag.focused] &&\n        foundFocusTargetPriority < FocusTargetPriority.FocusedModifier\n      ) {\n        focusTarget = day;\n        foundFocusTargetPriority = FocusTargetPriority.FocusedModifier;\n      } else if (\n        lastFocused?.isEqualTo(day) &&\n        foundFocusTargetPriority < FocusTargetPriority.LastFocused\n      ) {\n        focusTarget = day;\n        foundFocusTargetPriority = FocusTargetPriority.LastFocused;\n      } else if (\n        isSelected(day.date) &&\n        foundFocusTargetPriority < FocusTargetPriority.Selected\n      ) {\n        focusTarget = day;\n        foundFocusTargetPriority = FocusTargetPriority.Selected;\n      } else if (\n        modifiers[DayFlag.today] &&\n        foundFocusTargetPriority < FocusTargetPriority.Today\n      ) {\n        focusTarget = day;\n        foundFocusTargetPriority = FocusTargetPriority.Today;\n      }\n    }\n  }\n\n  if (!focusTarget) {\n    // Return the first day that is focusable\n    focusTarget = days.find((day) => isFocusableDay(getModifiers(day)));\n  }\n  return focusTarget;\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,UAAU;AAIlC,IAAKC,mBAKJ;AALD,WAAKA,mBAAmB;EACtBA,mBAAA,CAAAA,mBAAA,wBAAS;EACTA,mBAAA,CAAAA,mBAAA,8BAAQ;EACRA,mBAAA,CAAAA,mBAAA,oCAAW;EACXA,mBAAA,CAAAA,mBAAA,4CAAe;AACjB,CAAC,EALIA,mBAAmB,KAAnBA,mBAAmB;AAOxB;;;;;;;;;AASA,SAASC,cAAcA,CAACC,SAAoB;EAC1C,OACE,CAACA,SAAS,CAACH,OAAO,CAACI,QAAQ,CAAC,IAC5B,CAACD,SAAS,CAACH,OAAO,CAACK,MAAM,CAAC,IAC1B,CAACF,SAAS,CAACH,OAAO,CAACM,OAAO,CAAC;AAE/B;AAEA;;;;;;;;;;;;;;AAcA,OAAM,SAAUC,oBAAoBA,CAClCC,IAAmB,EACnBC,YAA6C,EAC7CC,UAAmC,EACnCC,WAAoC;EAEpC,IAAIC,WAAoC;EAExC,IAAIC,wBAAwB,GAA6B,CAAC,CAAC;EAC3D,KAAK,MAAMC,GAAG,IAAIN,IAAI,EAAE;IACtB,MAAML,SAAS,GAAGM,YAAY,CAACK,GAAG,CAAC;IAEnC,IAAIZ,cAAc,CAACC,SAAS,CAAC,EAAE;MAC7B,IACEA,SAAS,CAACH,OAAO,CAACe,OAAO,CAAC,IAC1BF,wBAAwB,GAAGZ,mBAAmB,CAACe,eAAe,EAC9D;QACAJ,WAAW,GAAGE,GAAG;QACjBD,wBAAwB,GAAGZ,mBAAmB,CAACe,eAAe;MAChE,CAAC,MAAM,IACLL,WAAW,EAAEM,SAAS,CAACH,GAAG,CAAC,IAC3BD,wBAAwB,GAAGZ,mBAAmB,CAACiB,WAAW,EAC1D;QACAN,WAAW,GAAGE,GAAG;QACjBD,wBAAwB,GAAGZ,mBAAmB,CAACiB,WAAW;MAC5D,CAAC,MAAM,IACLR,UAAU,CAACI,GAAG,CAACK,IAAI,CAAC,IACpBN,wBAAwB,GAAGZ,mBAAmB,CAACmB,QAAQ,EACvD;QACAR,WAAW,GAAGE,GAAG;QACjBD,wBAAwB,GAAGZ,mBAAmB,CAACmB,QAAQ;MACzD,CAAC,MAAM,IACLjB,SAAS,CAACH,OAAO,CAACqB,KAAK,CAAC,IACxBR,wBAAwB,GAAGZ,mBAAmB,CAACqB,KAAK,EACpD;QACAV,WAAW,GAAGE,GAAG;QACjBD,wBAAwB,GAAGZ,mBAAmB,CAACqB,KAAK;MACtD;IACF;EACF;EAEA,IAAI,CAACV,WAAW,EAAE;IAChB;IACAA,WAAW,GAAGJ,IAAI,CAACe,IAAI,CAAET,GAAG,IAAKZ,cAAc,CAACO,YAAY,CAACK,GAAG,CAAC,CAAC,CAAC;EACrE;EACA,OAAOF,WAAW;AACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}