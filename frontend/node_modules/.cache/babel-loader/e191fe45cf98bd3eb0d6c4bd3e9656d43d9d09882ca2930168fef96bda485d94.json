{"ast":null,"code":"import { useControlledValue } from \"../helpers/useControlledValue.js\";\nimport { addToRange, rangeContainsModifiers } from \"../utils/index.js\";\nimport { rangeIncludesDate } from \"../utils/rangeIncludesDate.js\";\n/**\n * Hook to manage range selection in the DayPicker component.\n *\n * @template T - The type of DayPicker props.\n * @param props - The DayPicker props.\n * @param dateLib - The date utility library instance.\n * @returns An object containing the selected range, a function to select a\n *   range, and a function to check if a date is within the range.\n */\nexport function useRange(props, dateLib) {\n  const {\n    disabled,\n    excludeDisabled,\n    selected: initiallySelected,\n    required,\n    onSelect\n  } = props;\n  const [internallySelected, setSelected] = useControlledValue(initiallySelected, onSelect ? initiallySelected : undefined);\n  const selected = !onSelect ? internallySelected : initiallySelected;\n  const isSelected = date => selected && rangeIncludesDate(selected, date, false, dateLib);\n  const select = (triggerDate, modifiers, e) => {\n    const {\n      min,\n      max\n    } = props;\n    const newRange = triggerDate ? addToRange(triggerDate, selected, min, max, required, dateLib) : undefined;\n    if (excludeDisabled && disabled && newRange?.from && newRange.to) {\n      if (rangeContainsModifiers({\n        from: newRange.from,\n        to: newRange.to\n      }, disabled, dateLib)) {\n        // if a disabled days is found, the range is reset\n        newRange.from = triggerDate;\n        newRange.to = undefined;\n      }\n    }\n    if (!onSelect) {\n      setSelected(newRange);\n    }\n    onSelect?.(newRange, triggerDate, modifiers, e);\n    return newRange;\n  };\n  return {\n    selected,\n    select,\n    isSelected\n  };\n}","map":{"version":3,"names":["useControlledValue","addToRange","rangeContainsModifiers","rangeIncludesDate","useRange","props","dateLib","disabled","excludeDisabled","selected","initiallySelected","required","onSelect","internallySelected","setSelected","undefined","isSelected","date","select","triggerDate","modifiers","e","min","max","newRange","from","to"],"sources":["/Users/paulius/Downloads/Projects/Meta Ads Uploader/frontend/node_modules/react-day-picker/src/selection/useRange.tsx"],"sourcesContent":["import React from \"react\";\n\nimport type { DateLib } from \"../classes/DateLib.js\";\nimport { useControlledValue } from \"../helpers/useControlledValue.js\";\nimport type {\n  DayPickerProps,\n  Modifiers,\n  PropsRange,\n  Selection\n} from \"../types/index.js\";\nimport { addToRange, rangeContainsModifiers } from \"../utils/index.js\";\nimport { rangeIncludesDate } from \"../utils/rangeIncludesDate.js\";\n\n/**\n * Hook to manage range selection in the DayPicker component.\n *\n * @template T - The type of DayPicker props.\n * @param props - The DayPicker props.\n * @param dateLib - The date utility library instance.\n * @returns An object containing the selected range, a function to select a\n *   range, and a function to check if a date is within the range.\n */\nexport function useRange<T extends DayPickerProps>(\n  props: T,\n  dateLib: DateLib\n): Selection<T> {\n  const {\n    disabled,\n    excludeDisabled,\n    selected: initiallySelected,\n    required,\n    onSelect\n  } = props as PropsRange;\n\n  const [internallySelected, setSelected] = useControlledValue(\n    initiallySelected,\n    onSelect ? initiallySelected : undefined\n  );\n\n  const selected = !onSelect ? internallySelected : initiallySelected;\n\n  const isSelected = (date: Date) =>\n    selected && rangeIncludesDate(selected, date, false, dateLib);\n\n  const select = (\n    triggerDate: Date,\n    modifiers: Modifiers,\n    e: React.MouseEvent | React.KeyboardEvent\n  ) => {\n    const { min, max } = props as PropsRange;\n    const newRange = triggerDate\n      ? addToRange(triggerDate, selected, min, max, required, dateLib)\n      : undefined;\n\n    if (excludeDisabled && disabled && newRange?.from && newRange.to) {\n      if (\n        rangeContainsModifiers(\n          { from: newRange.from, to: newRange.to },\n          disabled,\n          dateLib\n        )\n      ) {\n        // if a disabled days is found, the range is reset\n        newRange.from = triggerDate;\n        newRange.to = undefined;\n      }\n    }\n\n    if (!onSelect) {\n      setSelected(newRange);\n    }\n    onSelect?.(newRange, triggerDate, modifiers, e);\n\n    return newRange;\n  };\n\n  return {\n    selected,\n    select,\n    isSelected\n  } as Selection<T>;\n}\n"],"mappings":"AAGA,SAASA,kBAAkB,QAAQ,kCAAkC;AAOrE,SAASC,UAAU,EAAEC,sBAAsB,QAAQ,mBAAmB;AACtE,SAASC,iBAAiB,QAAQ,+BAA+B;AAEjE;;;;;;;;;AASA,OAAM,SAAUC,QAAQA,CACtBC,KAAQ,EACRC,OAAgB;EAEhB,MAAM;IACJC,QAAQ;IACRC,eAAe;IACfC,QAAQ,EAAEC,iBAAiB;IAC3BC,QAAQ;IACRC;EAAQ,CACT,GAAGP,KAAmB;EAEvB,MAAM,CAACQ,kBAAkB,EAAEC,WAAW,CAAC,GAAGd,kBAAkB,CAC1DU,iBAAiB,EACjBE,QAAQ,GAAGF,iBAAiB,GAAGK,SAAS,CACzC;EAED,MAAMN,QAAQ,GAAG,CAACG,QAAQ,GAAGC,kBAAkB,GAAGH,iBAAiB;EAEnE,MAAMM,UAAU,GAAIC,IAAU,IAC5BR,QAAQ,IAAIN,iBAAiB,CAACM,QAAQ,EAAEQ,IAAI,EAAE,KAAK,EAAEX,OAAO,CAAC;EAE/D,MAAMY,MAAM,GAAGA,CACbC,WAAiB,EACjBC,SAAoB,EACpBC,CAAyC,KACvC;IACF,MAAM;MAAEC,GAAG;MAAEC;IAAG,CAAE,GAAGlB,KAAmB;IACxC,MAAMmB,QAAQ,GAAGL,WAAW,GACxBlB,UAAU,CAACkB,WAAW,EAAEV,QAAQ,EAAEa,GAAG,EAAEC,GAAG,EAAEZ,QAAQ,EAAEL,OAAO,CAAC,GAC9DS,SAAS;IAEb,IAAIP,eAAe,IAAID,QAAQ,IAAIiB,QAAQ,EAAEC,IAAI,IAAID,QAAQ,CAACE,EAAE,EAAE;MAChE,IACExB,sBAAsB,CACpB;QAAEuB,IAAI,EAAED,QAAQ,CAACC,IAAI;QAAEC,EAAE,EAAEF,QAAQ,CAACE;MAAE,CAAE,EACxCnB,QAAQ,EACRD,OAAO,CACR,EACD;QACA;QACAkB,QAAQ,CAACC,IAAI,GAAGN,WAAW;QAC3BK,QAAQ,CAACE,EAAE,GAAGX,SAAS;MACzB;IACF;IAEA,IAAI,CAACH,QAAQ,EAAE;MACbE,WAAW,CAACU,QAAQ,CAAC;IACvB;IACAZ,QAAQ,GAAGY,QAAQ,EAAEL,WAAW,EAAEC,SAAS,EAAEC,CAAC,CAAC;IAE/C,OAAOG,QAAQ;EACjB,CAAC;EAED,OAAO;IACLf,QAAQ;IACRS,MAAM;IACNF;GACe;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}