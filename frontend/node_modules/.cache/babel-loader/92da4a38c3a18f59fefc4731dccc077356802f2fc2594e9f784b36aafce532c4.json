{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/Users/paulius/Downloads/Projects/Meta Ads Uploader/frontend/node_modules/react-day-picker/src/types/selection.ts"],"sourcesContent":["import type { DayPickerProps } from \"./props.js\";\nimport type { DateRange, Mode, Modifiers } from \"./shared.js\";\n\nexport type Selection<T extends DayPickerProps> = {\n  /** The selected date(s). */\n  selected: SelectedValue<T> | undefined;\n  /** Set a selection. */\n  select: SelectHandler<T> | undefined;\n  /** Whether the given date is selected. */\n  isSelected: (date: Date) => boolean;\n};\n\nexport type SelectedSingle<T extends { required?: boolean }> =\n  T[\"required\"] extends true ? Date : Date | undefined;\nexport type SelectedMulti<T extends { required?: boolean }> =\n  T[\"required\"] extends true ? Date[] : Date[] | undefined;\nexport type SelectedRange<T extends { required?: boolean }> =\n  T[\"required\"] extends true ? DateRange : DateRange | undefined;\n\n/**\n * Represents the selected value based on the selection mode.\n *\n * @example\n *   // Single selection mode\n *   const selected: SelectedValue<{ mode: \"single\" }> = new Date();\n *\n *   // Multiple selection mode\n *   const selected: SelectedValue<{ mode: \"multiple\" }> = [new Date(), new Date()];\n *\n *   // Range selection mode\n *   const selected: SelectedValue<{ mode: \"range\" }> = { from: new Date(), to: new Date() };\n */\nexport type SelectedValue<T> = T extends { mode: \"single\"; required?: boolean }\n  ? SelectedSingle<T>\n  : T extends { mode: \"multiple\"; required?: boolean }\n    ? SelectedMulti<T>\n    : T extends { mode: \"range\"; required?: boolean }\n      ? SelectedRange<T>\n      : undefined;\n\nexport type SelectHandlerSingle<T extends { required?: boolean | undefined }> =\n  (\n    triggerDate: Date,\n    modifiers: Modifiers,\n    e: React.MouseEvent | React.KeyboardEvent\n  ) => T[\"required\"] extends true ? Date : Date | undefined;\n\nexport type SelectHandlerMulti<T extends { required?: boolean | undefined }> = (\n  triggerDate: Date,\n  modifiers: Modifiers,\n  e: React.MouseEvent | React.KeyboardEvent\n) => T[\"required\"] extends true ? Date[] : Date[] | undefined;\n\nexport type SelectHandlerRange<T extends { required?: boolean | undefined }> = (\n  triggerDate: Date,\n  modifiers: Modifiers,\n  e: React.MouseEvent | React.KeyboardEvent\n) => T[\"required\"] extends true ? DateRange : DateRange | undefined;\n\n/**\n * The handler to set a selection based on the mode.\n *\n * @example\n *   const handleSelect: SelectHandler<{ mode: \"single\" }> = (\n *     triggerDate,\n *     modifiers,\n *     e\n *   ) => {\n *     console.log(\"Selected date:\", triggerDate);\n *   };\n */\nexport type SelectHandler<\n  T extends { mode?: Mode | undefined; required?: boolean | undefined }\n> = T extends {\n  mode: \"single\";\n}\n  ? SelectHandlerSingle<T>\n  : T extends { mode: \"multiple\" }\n    ? SelectHandlerMulti<T>\n    : T extends { mode: \"range\" }\n      ? SelectHandlerRange<T>\n      : undefined;\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}