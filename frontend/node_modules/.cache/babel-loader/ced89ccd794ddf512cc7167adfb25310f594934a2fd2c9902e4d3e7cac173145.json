{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001';\n\n// API Response Types\n\n// Facebook Auth Types\n\n// Media Types (Images and Videos)\n\n// Template Types\n\n// Ad Types\n\n// API Client Class\nclass ApiClient {\n  constructor(baseUrl) {\n    this.baseUrl = void 0;\n    this.baseUrl = baseUrl;\n  }\n  async request(endpoint, options = {}) {\n    const url = `${this.baseUrl}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    };\n    console.log('API Request:', {\n      url,\n      method: config.method || 'GET',\n      body: config.body,\n      headers: config.headers\n    });\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n      console.log('API Response:', {\n        status: response.status,\n        data\n      });\n      if (!response.ok) {\n        throw new Error(data.message || `HTTP ${response.status}`);\n      }\n      return data;\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n\n  // Health Check\n  async healthCheck() {\n    const response = await this.request('/health');\n    return response.data;\n  }\n\n  // Auth Endpoints\n  async validateCredentials(credentials) {\n    const response = await this.request('/api/auth/validate', {\n      method: 'POST',\n      body: JSON.stringify(credentials)\n    });\n    return response.data;\n  }\n  async getAuthStatus() {\n    const response = await this.request('/api/auth/status');\n    return response.data;\n  }\n\n  // Media Upload and Management\n  async uploadMedia(files) {\n    const formData = new FormData();\n    files.forEach(file => {\n      formData.append('media', file);\n    });\n    const response = await this.request('/api/media/upload', {\n      method: 'POST',\n      body: formData,\n      headers: {} // Let browser set Content-Type for FormData\n    });\n    return response.data;\n  }\n  async getMedia() {\n    const response = await this.request('/api/media');\n    return response.data;\n  }\n  async deleteMedia(mediaId) {\n    await this.request(`/api/media/${mediaId}`, {\n      method: 'DELETE'\n    });\n  }\n\n  // Template Endpoints\n  async createTemplate(template) {\n    const response = await this.request('/api/templates', {\n      method: 'POST',\n      body: JSON.stringify(template)\n    });\n    return response.data;\n  }\n  async getTemplates(page = 1, limit = 10, search) {\n    const params = new URLSearchParams({\n      page: page.toString(),\n      limit: limit.toString()\n    });\n    if (search) {\n      params.append('search', search);\n    }\n    const response = await this.request(`/api/templates?${params}`);\n    return response.data;\n  }\n  async getTemplate(templateId) {\n    const response = await this.request(`/api/templates/${templateId}`);\n    return response.data;\n  }\n  async updateTemplate(templateId, updates) {\n    const response = await this.request(`/api/templates/${templateId}`, {\n      method: 'PUT',\n      body: JSON.stringify(updates)\n    });\n    return response.data;\n  }\n  async deleteTemplate(templateId) {\n    await this.request(`/api/templates/${templateId}`, {\n      method: 'DELETE'\n    });\n  }\n\n  // Ad Endpoints\n  async createBulkAds(request) {\n    const response = await this.request('/api/ads/bulk', {\n      method: 'POST',\n      body: JSON.stringify(request)\n    });\n    return response.data;\n  }\n  async getJobStatus(jobId) {\n    const response = await this.request(`/api/ads/jobs/${jobId}`);\n    return response.data;\n  }\n  async getAllJobs() {\n    const response = await this.request('/api/ads/jobs');\n    return response.data;\n  }\n  async deleteJob(jobId) {\n    await this.request(`/api/ads/jobs/${jobId}`, {\n      method: 'DELETE'\n    });\n  }\n}\n\n// Export singleton instance\nexport const apiClient = new ApiClient(API_BASE_URL);","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiClient","constructor","baseUrl","request","endpoint","options","url","config","headers","console","log","method","body","response","fetch","data","json","status","ok","Error","message","error","healthCheck","validateCredentials","credentials","JSON","stringify","getAuthStatus","uploadMedia","files","formData","FormData","forEach","file","append","getMedia","deleteMedia","mediaId","createTemplate","template","getTemplates","page","limit","search","params","URLSearchParams","toString","getTemplate","templateId","updateTemplate","updates","deleteTemplate","createBulkAds","getJobStatus","jobId","getAllJobs","deleteJob","apiClient"],"sources":["/Users/paulius/Downloads/Projects/Meta Ads Uploader/frontend/src/lib/api.ts"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001';\n\n// API Response Types\ninterface ApiResponse<T = any> {\n  success: boolean;\n  data?: T;\n  message?: string;\n  error?: string;\n  timestamp: string;\n}\n\n// Facebook Auth Types\nexport interface FacebookCredentials {\n  appId: string;\n  appSecret: string;\n  accessToken: string;\n  adAccountId: string;\n}\n\nexport interface FacebookAdAccount {\n  id: string;\n  name: string;\n  currency: string;\n  timezone: string;\n}\n\nexport interface AuthStatus {\n  isInitialized: boolean;\n  hasAccessToken: boolean;\n  hasAdAccountId: boolean;\n}\n\n// Media Types (Images and Videos)\nexport interface UploadedMedia {\n  id: string;\n  filename: string;\n  originalName: string;\n  url: string;\n  size: number;\n  mimeType: string;\n  mediaType: 'image' | 'video';\n  dimensions: {\n    width: number;\n    height: number;\n  };\n  duration?: number; // For videos\n  uploadedAt: string;\n}\n\nexport interface UploadResponse {\n  uploadedMedia: UploadedMedia[];\n  totalUploaded: number;\n  failedUploads: string[];\n}\n\n// Template Types\nexport interface AdCopy {\n  headline: string;\n  primaryText: string;\n  callToAction?: 'SHOP_NOW' | 'LEARN_MORE' | 'SIGN_UP' | 'BOOK_NOW' | 'CONTACT_US';\n  description?: string;\n}\n\nexport interface Targeting {\n  ageMin?: number;\n  ageMax?: number;\n  genders?: ('all' | 'men' | 'women')[];\n  locations?: string[];\n  interests?: string[];\n  customAudiences?: string[];\n}\n\nexport interface Budget {\n  amount: number;\n  currency: 'USD' | 'EUR' | 'GBP' | 'CAD';\n  type: 'DAILY' | 'LIFETIME';\n}\n\nexport interface Placement {\n  facebook: boolean;\n  instagram: boolean;\n  audienceNetwork: boolean;\n}\n\nexport interface AdTemplate {\n  id: string;\n  name: string;\n  description: string;\n  adCopy: AdCopy;\n  targeting: Targeting;\n  budget: Budget;\n  placement: Placement;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface CreateTemplateRequest {\n  name: string;\n  description?: string;\n  adCopy: AdCopy;\n  targeting: Targeting;\n  budget: Budget;\n  placement: Placement;\n}\n\nexport interface UpdateTemplateRequest {\n  name?: string;\n  description?: string;\n  adCopy?: AdCopy;\n  targeting?: Targeting;\n  budget?: Budget;\n  placement?: Placement;\n}\n\nexport interface PaginationInfo {\n  page: number;\n  limit: number;\n  total: number;\n  totalPages: number;\n  hasNext: boolean;\n  hasPrev: boolean;\n}\n\nexport interface TemplateListResponse {\n  templates: AdTemplate[];\n  pagination: PaginationInfo;\n}\n\n// Ad Types\nexport interface BulkAdRequest {\n  templateId: string;\n  media: string[]; // Media IDs (images or videos)\n  campaignName: string;\n  adSetName: string;\n  options: {\n    createCampaign: boolean;\n    createAdSet: boolean;\n    status: 'ACTIVE' | 'PAUSED';\n    campaignBudget?: number;\n    adSetBudget?: number;\n  };\n}\n\nexport interface AdCreationJob {\n  id: string;\n  status: 'PENDING' | 'PROCESSING' | 'COMPLETED' | 'FAILED';\n  progress: number;\n  totalAds: number;\n  createdAds: number;\n  failedAds: number;\n  results: {\n    campaignId?: string;\n    adSetId?: string;\n    adIds: string[];\n    errors: string[];\n  };\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface AdCreationResponse {\n  jobId: string;\n  status: string;\n  message: string;\n}\n\n// API Client Class\nclass ApiClient {\n  private baseUrl: string;\n\n  constructor(baseUrl: string) {\n    this.baseUrl = baseUrl;\n  }\n\n  private async request<T>(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<ApiResponse<T>> {\n    const url = `${this.baseUrl}${endpoint}`;\n    const config: RequestInit = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    console.log('API Request:', {\n      url,\n      method: config.method || 'GET',\n      body: config.body,\n      headers: config.headers\n    });\n\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n\n      console.log('API Response:', {\n        status: response.status,\n        data\n      });\n\n      if (!response.ok) {\n        throw new Error(data.message || `HTTP ${response.status}`);\n      }\n\n      return data;\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n\n  // Health Check\n  async healthCheck(): Promise<{ status: string; timestamp: string; uptime: number }> {\n    const response = await this.request<{ status: string; timestamp: string; uptime: number }>('/health');\n    return response.data!;\n  }\n\n  // Auth Endpoints\n  async validateCredentials(credentials: FacebookCredentials): Promise<{\n    isValid: boolean;\n    adAccount?: FacebookAdAccount;\n    permissions?: string[];\n  }> {\n    const response = await this.request<{\n      isValid: boolean;\n      adAccount?: FacebookAdAccount;\n      permissions?: string[];\n    }>('/api/auth/validate', {\n      method: 'POST',\n      body: JSON.stringify(credentials),\n    });\n    return response.data!;\n  }\n\n  async getAuthStatus(): Promise<AuthStatus> {\n    const response = await this.request<AuthStatus>('/api/auth/status');\n    return response.data!;\n  }\n\n  // Media Upload and Management\n  async uploadMedia(files: File[]): Promise<UploadResponse> {\n    const formData = new FormData();\n    files.forEach((file) => {\n      formData.append('media', file);\n    });\n\n    const response = await this.request<UploadResponse>('/api/media/upload', {\n      method: 'POST',\n      body: formData,\n      headers: {}, // Let browser set Content-Type for FormData\n    });\n    return response.data!;\n  }\n\n  async getMedia(): Promise<{ media: UploadedMedia[]; total: number }> {\n    const response = await this.request<{ media: UploadedMedia[]; total: number }>('/api/media');\n    return response.data!;\n  }\n\n  async deleteMedia(mediaId: string): Promise<void> {\n    await this.request(`/api/media/${mediaId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Template Endpoints\n  async createTemplate(template: CreateTemplateRequest): Promise<AdTemplate> {\n    const response = await this.request<AdTemplate>('/api/templates', {\n      method: 'POST',\n      body: JSON.stringify(template),\n    });\n    return response.data!;\n  }\n\n  async getTemplates(page = 1, limit = 10, search?: string): Promise<TemplateListResponse> {\n    const params = new URLSearchParams({\n      page: page.toString(),\n      limit: limit.toString(),\n    });\n    if (search) {\n      params.append('search', search);\n    }\n\n    const response = await this.request<TemplateListResponse>(`/api/templates?${params}`);\n    return response.data!;\n  }\n\n  async getTemplate(templateId: string): Promise<AdTemplate> {\n    const response = await this.request<AdTemplate>(`/api/templates/${templateId}`);\n    return response.data!;\n  }\n\n  async updateTemplate(templateId: string, updates: UpdateTemplateRequest): Promise<AdTemplate> {\n    const response = await this.request<AdTemplate>(`/api/templates/${templateId}`, {\n      method: 'PUT',\n      body: JSON.stringify(updates),\n    });\n    return response.data!;\n  }\n\n  async deleteTemplate(templateId: string): Promise<void> {\n    await this.request(`/api/templates/${templateId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Ad Endpoints\n  async createBulkAds(request: BulkAdRequest): Promise<AdCreationResponse> {\n    const response = await this.request<AdCreationResponse>('/api/ads/bulk', {\n      method: 'POST',\n      body: JSON.stringify(request),\n    });\n    return response.data!;\n  }\n\n  async getJobStatus(jobId: string): Promise<AdCreationJob> {\n    const response = await this.request<AdCreationJob>(`/api/ads/jobs/${jobId}`);\n    return response.data!;\n  }\n\n  async getAllJobs(): Promise<{ jobs: AdCreationJob[]; total: number }> {\n    const response = await this.request<{ jobs: AdCreationJob[]; total: number }>('/api/ads/jobs');\n    return response.data!;\n  }\n\n  async deleteJob(jobId: string): Promise<void> {\n    await this.request(`/api/ads/jobs/${jobId}`, {\n      method: 'DELETE',\n    });\n  }\n}\n\n// Export singleton instance\nexport const apiClient = new ApiClient(API_BASE_URL); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}