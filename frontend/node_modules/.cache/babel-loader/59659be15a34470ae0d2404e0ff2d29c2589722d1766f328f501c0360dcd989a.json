{"ast":null,"code":"import { useControlledValue } from \"../helpers/useControlledValue.js\";\n/**\n * Hook to manage multiple-date selection in the DayPicker component.\n *\n * @template T - The type of DayPicker props.\n * @param props - The DayPicker props.\n * @param dateLib - The date utility library instance.\n * @returns An object containing the selected dates, a function to select dates,\n *   and a function to check if a date is selected.\n */\nexport function useMulti(props, dateLib) {\n  const {\n    selected: initiallySelected,\n    required,\n    onSelect\n  } = props;\n  const [internallySelected, setSelected] = useControlledValue(initiallySelected, onSelect ? initiallySelected : undefined);\n  const selected = !onSelect ? internallySelected : initiallySelected;\n  const {\n    isSameDay\n  } = dateLib;\n  const isSelected = date => {\n    return selected?.some(d => isSameDay(d, date)) ?? false;\n  };\n  const {\n    min,\n    max\n  } = props;\n  const select = (triggerDate, modifiers, e) => {\n    let newDates = [...(selected ?? [])];\n    if (isSelected(triggerDate)) {\n      if (selected?.length === min) {\n        // Min value reached, do nothing\n        return;\n      }\n      if (required && selected?.length === 1) {\n        // Required value already selected do nothing\n        return;\n      }\n      newDates = selected?.filter(d => !isSameDay(d, triggerDate));\n    } else {\n      if (selected?.length === max) {\n        // Max value reached, reset the selection to date\n        newDates = [triggerDate];\n      } else {\n        // Add the date to the selection\n        newDates = [...newDates, triggerDate];\n      }\n    }\n    if (!onSelect) {\n      setSelected(newDates);\n    }\n    onSelect?.(newDates, triggerDate, modifiers, e);\n    return newDates;\n  };\n  return {\n    selected,\n    select,\n    isSelected\n  };\n}","map":{"version":3,"names":["useControlledValue","useMulti","props","dateLib","selected","initiallySelected","required","onSelect","internallySelected","setSelected","undefined","isSameDay","isSelected","date","some","d","min","max","select","triggerDate","modifiers","e","newDates","length","filter"],"sources":["/Users/paulius/Downloads/Projects/Meta Ads Uploader/frontend/node_modules/react-day-picker/src/selection/useMulti.tsx"],"sourcesContent":["import React from \"react\";\n\nimport type { DateLib } from \"../classes/DateLib.js\";\nimport { useControlledValue } from \"../helpers/useControlledValue.js\";\nimport type {\n  DayPickerProps,\n  Modifiers,\n  PropsMulti,\n  Selection\n} from \"../types/index.js\";\n\n/**\n * Hook to manage multiple-date selection in the DayPicker component.\n *\n * @template T - The type of DayPicker props.\n * @param props - The DayPicker props.\n * @param dateLib - The date utility library instance.\n * @returns An object containing the selected dates, a function to select dates,\n *   and a function to check if a date is selected.\n */\nexport function useMulti<T extends DayPickerProps>(\n  props: T,\n  dateLib: DateLib\n): Selection<T> {\n  const {\n    selected: initiallySelected,\n    required,\n    onSelect\n  } = props as PropsMulti;\n\n  const [internallySelected, setSelected] = useControlledValue(\n    initiallySelected,\n    onSelect ? initiallySelected : undefined\n  );\n\n  const selected = !onSelect ? internallySelected : initiallySelected;\n\n  const { isSameDay } = dateLib;\n\n  const isSelected = (date: Date) => {\n    return selected?.some((d) => isSameDay(d, date)) ?? false;\n  };\n\n  const { min, max } = props as PropsMulti;\n\n  const select = (\n    triggerDate: Date,\n    modifiers: Modifiers,\n    e: React.MouseEvent | React.KeyboardEvent\n  ) => {\n    let newDates: Date[] | undefined = [...(selected ?? [])];\n    if (isSelected(triggerDate)) {\n      if (selected?.length === min) {\n        // Min value reached, do nothing\n        return;\n      }\n      if (required && selected?.length === 1) {\n        // Required value already selected do nothing\n        return;\n      }\n      newDates = selected?.filter((d) => !isSameDay(d, triggerDate));\n    } else {\n      if (selected?.length === max) {\n        // Max value reached, reset the selection to date\n        newDates = [triggerDate];\n      } else {\n        // Add the date to the selection\n        newDates = [...newDates, triggerDate];\n      }\n    }\n    if (!onSelect) {\n      setSelected(newDates);\n    }\n    onSelect?.(newDates, triggerDate, modifiers, e);\n    return newDates;\n  };\n\n  return {\n    selected,\n    select,\n    isSelected\n  } as Selection<T>;\n}\n"],"mappings":"AAGA,SAASA,kBAAkB,QAAQ,kCAAkC;AAQrE;;;;;;;;;AASA,OAAM,SAAUC,QAAQA,CACtBC,KAAQ,EACRC,OAAgB;EAEhB,MAAM;IACJC,QAAQ,EAAEC,iBAAiB;IAC3BC,QAAQ;IACRC;EAAQ,CACT,GAAGL,KAAmB;EAEvB,MAAM,CAACM,kBAAkB,EAAEC,WAAW,CAAC,GAAGT,kBAAkB,CAC1DK,iBAAiB,EACjBE,QAAQ,GAAGF,iBAAiB,GAAGK,SAAS,CACzC;EAED,MAAMN,QAAQ,GAAG,CAACG,QAAQ,GAAGC,kBAAkB,GAAGH,iBAAiB;EAEnE,MAAM;IAAEM;EAAS,CAAE,GAAGR,OAAO;EAE7B,MAAMS,UAAU,GAAIC,IAAU,IAAI;IAChC,OAAOT,QAAQ,EAAEU,IAAI,CAAEC,CAAC,IAAKJ,SAAS,CAACI,CAAC,EAAEF,IAAI,CAAC,CAAC,IAAI,KAAK;EAC3D,CAAC;EAED,MAAM;IAAEG,GAAG;IAAEC;EAAG,CAAE,GAAGf,KAAmB;EAExC,MAAMgB,MAAM,GAAGA,CACbC,WAAiB,EACjBC,SAAoB,EACpBC,CAAyC,KACvC;IACF,IAAIC,QAAQ,GAAuB,CAAC,IAAIlB,QAAQ,IAAI,EAAE,CAAC,CAAC;IACxD,IAAIQ,UAAU,CAACO,WAAW,CAAC,EAAE;MAC3B,IAAIf,QAAQ,EAAEmB,MAAM,KAAKP,GAAG,EAAE;QAC5B;QACA;MACF;MACA,IAAIV,QAAQ,IAAIF,QAAQ,EAAEmB,MAAM,KAAK,CAAC,EAAE;QACtC;QACA;MACF;MACAD,QAAQ,GAAGlB,QAAQ,EAAEoB,MAAM,CAAET,CAAC,IAAK,CAACJ,SAAS,CAACI,CAAC,EAAEI,WAAW,CAAC,CAAC;IAChE,CAAC,MAAM;MACL,IAAIf,QAAQ,EAAEmB,MAAM,KAAKN,GAAG,EAAE;QAC5B;QACAK,QAAQ,GAAG,CAACH,WAAW,CAAC;MAC1B,CAAC,MAAM;QACL;QACAG,QAAQ,GAAG,CAAC,GAAGA,QAAQ,EAAEH,WAAW,CAAC;MACvC;IACF;IACA,IAAI,CAACZ,QAAQ,EAAE;MACbE,WAAW,CAACa,QAAQ,CAAC;IACvB;IACAf,QAAQ,GAAGe,QAAQ,EAAEH,WAAW,EAAEC,SAAS,EAAEC,CAAC,CAAC;IAC/C,OAAOC,QAAQ;EACjB,CAAC;EAED,OAAO;IACLlB,QAAQ;IACRc,MAAM;IACNN;GACe;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}