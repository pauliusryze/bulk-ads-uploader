{"ast":null,"code":"import { useEffect } from \"react\";\nimport { getDates } from \"./helpers/getDates.js\";\nimport { getDays } from \"./helpers/getDays.js\";\nimport { getDisplayMonths } from \"./helpers/getDisplayMonths.js\";\nimport { getInitialMonth } from \"./helpers/getInitialMonth.js\";\nimport { getMonths } from \"./helpers/getMonths.js\";\nimport { getNavMonths } from \"./helpers/getNavMonth.js\";\nimport { getNextMonth } from \"./helpers/getNextMonth.js\";\nimport { getPreviousMonth } from \"./helpers/getPreviousMonth.js\";\nimport { getWeeks } from \"./helpers/getWeeks.js\";\nimport { useControlledValue } from \"./helpers/useControlledValue.js\";\n/**\n * Provides the calendar object to work with the calendar in custom components.\n *\n * @private\n * @param props - The DayPicker props related to calendar configuration.\n * @param dateLib - The date utility library instance.\n * @returns The calendar object containing displayed days, weeks, months, and\n *   navigation methods.\n */\nexport function useCalendar(props, dateLib) {\n  const [navStart, navEnd] = getNavMonths(props, dateLib);\n  const {\n    startOfMonth,\n    endOfMonth\n  } = dateLib;\n  const initialMonth = getInitialMonth(props, navStart, navEnd, dateLib);\n  const [firstMonth, setFirstMonth] = useControlledValue(initialMonth,\n  // initialMonth is always computed from props.month if provided\n  props.month ? initialMonth : undefined);\n  useEffect(() => {\n    const newInitialMonth = getInitialMonth(props, navStart, navEnd, dateLib);\n    setFirstMonth(newInitialMonth);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.timeZone]);\n  /** The months displayed in the calendar. */\n  const displayMonths = getDisplayMonths(firstMonth, navEnd, props, dateLib);\n  /** The dates displayed in the calendar. */\n  const dates = getDates(displayMonths, props.endMonth ? endOfMonth(props.endMonth) : undefined, props, dateLib);\n  /** The Months displayed in the calendar. */\n  const months = getMonths(displayMonths, dates, props, dateLib);\n  /** The Weeks displayed in the calendar. */\n  const weeks = getWeeks(months);\n  /** The Days displayed in the calendar. */\n  const days = getDays(months);\n  const previousMonth = getPreviousMonth(firstMonth, navStart, props, dateLib);\n  const nextMonth = getNextMonth(firstMonth, navEnd, props, dateLib);\n  const {\n    disableNavigation,\n    onMonthChange\n  } = props;\n  const isDayInCalendar = day => weeks.some(week => week.days.some(d => d.isEqualTo(day)));\n  const goToMonth = date => {\n    if (disableNavigation) {\n      return;\n    }\n    let newMonth = startOfMonth(date);\n    // if month is before start, use the first month instead\n    if (navStart && newMonth < startOfMonth(navStart)) {\n      newMonth = startOfMonth(navStart);\n    }\n    // if month is after endMonth, use the last month instead\n    if (navEnd && newMonth > startOfMonth(navEnd)) {\n      newMonth = startOfMonth(navEnd);\n    }\n    setFirstMonth(newMonth);\n    onMonthChange?.(newMonth);\n  };\n  const goToDay = day => {\n    // is this check necessary?\n    if (isDayInCalendar(day)) {\n      return;\n    }\n    goToMonth(day.date);\n  };\n  const calendar = {\n    months,\n    weeks,\n    days,\n    navStart,\n    navEnd,\n    previousMonth,\n    nextMonth,\n    goToMonth,\n    goToDay\n  };\n  return calendar;\n}","map":{"version":3,"names":["useEffect","getDates","getDays","getDisplayMonths","getInitialMonth","getMonths","getNavMonths","getNextMonth","getPreviousMonth","getWeeks","useControlledValue","useCalendar","props","dateLib","navStart","navEnd","startOfMonth","endOfMonth","initialMonth","firstMonth","setFirstMonth","month","undefined","newInitialMonth","timeZone","displayMonths","dates","endMonth","months","weeks","days","previousMonth","nextMonth","disableNavigation","onMonthChange","isDayInCalendar","day","some","week","d","isEqualTo","goToMonth","date","newMonth","goToDay","calendar"],"sources":["/Users/paulius/Downloads/Projects/Meta Ads Uploader/frontend/node_modules/react-day-picker/src/useCalendar.ts"],"sourcesContent":["import { useEffect } from \"react\";\n\nimport type {\n  CalendarWeek,\n  CalendarDay,\n  CalendarMonth,\n  DateLib\n} from \"./classes/index.js\";\nimport { getDates } from \"./helpers/getDates.js\";\nimport { getDays } from \"./helpers/getDays.js\";\nimport { getDisplayMonths } from \"./helpers/getDisplayMonths.js\";\nimport { getInitialMonth } from \"./helpers/getInitialMonth.js\";\nimport { getMonths } from \"./helpers/getMonths.js\";\nimport { getNavMonths } from \"./helpers/getNavMonth.js\";\nimport { getNextMonth } from \"./helpers/getNextMonth.js\";\nimport { getPreviousMonth } from \"./helpers/getPreviousMonth.js\";\nimport { getWeeks } from \"./helpers/getWeeks.js\";\nimport { useControlledValue } from \"./helpers/useControlledValue.js\";\nimport type { DayPickerProps } from \"./types/props.js\";\n\n/**\n * Return the calendar object to work with the calendar in custom components.\n *\n * @see https://daypicker.dev/guides/custom-components\n */\nexport interface Calendar {\n  /**\n   * All the days displayed in the calendar. As opposite from\n   * {@link CalendarContext.dates}, it may return duplicated dates when shown\n   * outside the month.\n   */\n  days: CalendarDay[];\n  /** The months displayed in the calendar. */\n  weeks: CalendarWeek[];\n  /** The months displayed in the calendar. */\n  months: CalendarMonth[];\n\n  /** The next month to display. */\n  nextMonth: Date | undefined;\n  /** The previous month to display. */\n  previousMonth: Date | undefined;\n\n  /**\n   * The month where the navigation starts. `undefined` if the calendar can be\n   * navigated indefinitely to the past.\n   */\n  navStart: Date | undefined;\n  /**\n   * The month where the navigation ends. `undefined` if the calendar can be\n   * navigated indefinitely to the past.\n   */\n  navEnd: Date | undefined;\n\n  /** Navigate to the specified month. Will fire the `onMonthChange` callback. */\n  goToMonth: (month: Date) => void;\n  /**\n   * Navigate to the specified date. If the second parameter (refDate) is\n   * provided and the date is before the refDate, then the month is set to one\n   * month before the date.\n   *\n   * @param day - The date to navigate to.\n   * @param dateToCompare - Optional. If `date` is before `dateToCompare`, the\n   *   month is set to one month before the date.\n   */\n  goToDay: (day: CalendarDay) => void;\n}\n\n/**\n * Provides the calendar object to work with the calendar in custom components.\n *\n * @private\n * @param props - The DayPicker props related to calendar configuration.\n * @param dateLib - The date utility library instance.\n * @returns The calendar object containing displayed days, weeks, months, and\n *   navigation methods.\n */\nexport function useCalendar(\n  props: Pick<\n    DayPickerProps,\n    | \"captionLayout\"\n    | \"endMonth\"\n    | \"startMonth\"\n    | \"today\"\n    | \"fixedWeeks\"\n    | \"ISOWeek\"\n    | \"numberOfMonths\"\n    | \"disableNavigation\"\n    | \"onMonthChange\"\n    | \"month\"\n    | \"defaultMonth\"\n    | \"timeZone\"\n    | \"broadcastCalendar\"\n    // Deprecated:\n    | \"fromMonth\"\n    | \"fromYear\"\n    | \"toMonth\"\n    | \"toYear\"\n  >,\n  dateLib: DateLib\n): Calendar {\n  const [navStart, navEnd] = getNavMonths(props, dateLib);\n\n  const { startOfMonth, endOfMonth } = dateLib;\n  const initialMonth = getInitialMonth(props, navStart, navEnd, dateLib);\n  const [firstMonth, setFirstMonth] = useControlledValue(\n    initialMonth,\n    // initialMonth is always computed from props.month if provided\n    props.month ? initialMonth : undefined\n  );\n\n  useEffect(() => {\n    const newInitialMonth = getInitialMonth(props, navStart, navEnd, dateLib);\n    setFirstMonth(newInitialMonth);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.timeZone]);\n\n  /** The months displayed in the calendar. */\n  const displayMonths = getDisplayMonths(firstMonth, navEnd, props, dateLib);\n\n  /** The dates displayed in the calendar. */\n  const dates = getDates(\n    displayMonths,\n    props.endMonth ? endOfMonth(props.endMonth) : undefined,\n    props,\n    dateLib\n  );\n\n  /** The Months displayed in the calendar. */\n  const months = getMonths(displayMonths, dates, props, dateLib);\n\n  /** The Weeks displayed in the calendar. */\n  const weeks = getWeeks(months);\n\n  /** The Days displayed in the calendar. */\n  const days = getDays(months);\n\n  const previousMonth = getPreviousMonth(firstMonth, navStart, props, dateLib);\n  const nextMonth = getNextMonth(firstMonth, navEnd, props, dateLib);\n\n  const { disableNavigation, onMonthChange } = props;\n\n  const isDayInCalendar = (day: CalendarDay) =>\n    weeks.some((week: CalendarWeek) => week.days.some((d) => d.isEqualTo(day)));\n\n  const goToMonth = (date: Date) => {\n    if (disableNavigation) {\n      return;\n    }\n    let newMonth = startOfMonth(date);\n    // if month is before start, use the first month instead\n    if (navStart && newMonth < startOfMonth(navStart)) {\n      newMonth = startOfMonth(navStart);\n    }\n    // if month is after endMonth, use the last month instead\n    if (navEnd && newMonth > startOfMonth(navEnd)) {\n      newMonth = startOfMonth(navEnd);\n    }\n    setFirstMonth(newMonth);\n    onMonthChange?.(newMonth);\n  };\n\n  const goToDay = (day: CalendarDay) => {\n    // is this check necessary?\n    if (isDayInCalendar(day)) {\n      return;\n    }\n    goToMonth(day.date);\n  };\n\n  const calendar = {\n    months,\n    weeks,\n    days,\n\n    navStart,\n    navEnd,\n\n    previousMonth,\n    nextMonth,\n\n    goToMonth,\n    goToDay\n  };\n\n  return calendar;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}