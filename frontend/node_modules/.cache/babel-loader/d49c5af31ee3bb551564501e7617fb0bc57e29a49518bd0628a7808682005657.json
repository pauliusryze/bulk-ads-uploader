{"ast":null,"code":"const offsetFormatCache = {};\nconst offsetCache = {};\n\n/**\n * The function extracts UTC offset in minutes from the given date in specified\n * time zone.\n *\n * Unlike `Date.prototype.getTimezoneOffset`, this function returns the value\n * mirrored to the sign of the offset in the time zone. For Asia/Singapore\n * (UTC+8), `tzOffset` returns 480, while `getTimezoneOffset` returns -480.\n *\n * @param timeZone - Time zone name (IANA or UTC offset)\n * @param date - Date to check the offset for\n *\n * @returns UTC offset in minutes\n */\nexport function tzOffset(timeZone, date) {\n  try {\n    const format = offsetFormatCache[timeZone] ||= new Intl.DateTimeFormat(\"en-GB\", {\n      timeZone,\n      hour: \"numeric\",\n      timeZoneName: \"longOffset\"\n    }).format;\n    const offsetStr = format(date).split('GMT')[1] || '';\n    if (offsetStr in offsetCache) return offsetCache[offsetStr];\n    return calcOffset(offsetStr, offsetStr.split(\":\"));\n  } catch {\n    // Fallback to manual parsing if the runtime doesn't support ±HH:MM/±HHMM/±HH\n    // See: https://github.com/nodejs/node/issues/53419\n    if (timeZone in offsetCache) return offsetCache[timeZone];\n    const captures = timeZone?.match(offsetRe);\n    if (captures) return calcOffset(timeZone, captures.slice(1));\n    return NaN;\n  }\n}\nconst offsetRe = /([+-]\\d\\d):?(\\d\\d)?/;\nfunction calcOffset(cacheStr, values) {\n  const hours = +values[0];\n  const minutes = +(values[1] || 0);\n  return offsetCache[cacheStr] = hours > 0 ? hours * 60 + minutes : hours * 60 - minutes;\n}","map":{"version":3,"names":["offsetFormatCache","offsetCache","tzOffset","timeZone","date","format","Intl","DateTimeFormat","hour","timeZoneName","offsetStr","split","calcOffset","captures","match","offsetRe","slice","NaN","cacheStr","values","hours","minutes"],"sources":["/Users/paulius/Downloads/Projects/Meta Ads Uploader/frontend/node_modules/@date-fns/tz/tzOffset/index.js"],"sourcesContent":["const offsetFormatCache = {};\nconst offsetCache = {};\n\n/**\n * The function extracts UTC offset in minutes from the given date in specified\n * time zone.\n *\n * Unlike `Date.prototype.getTimezoneOffset`, this function returns the value\n * mirrored to the sign of the offset in the time zone. For Asia/Singapore\n * (UTC+8), `tzOffset` returns 480, while `getTimezoneOffset` returns -480.\n *\n * @param timeZone - Time zone name (IANA or UTC offset)\n * @param date - Date to check the offset for\n *\n * @returns UTC offset in minutes\n */\nexport function tzOffset(timeZone, date) {\n  try {\n    const format = offsetFormatCache[timeZone] ||= new Intl.DateTimeFormat(\"en-GB\", {\n      timeZone,\n      hour: \"numeric\",\n      timeZoneName: \"longOffset\"\n    }).format;\n    const offsetStr = format(date).split('GMT')[1] || '';\n    if (offsetStr in offsetCache) return offsetCache[offsetStr];\n    return calcOffset(offsetStr, offsetStr.split(\":\"));\n  } catch {\n    // Fallback to manual parsing if the runtime doesn't support ±HH:MM/±HHMM/±HH\n    // See: https://github.com/nodejs/node/issues/53419\n    if (timeZone in offsetCache) return offsetCache[timeZone];\n    const captures = timeZone?.match(offsetRe);\n    if (captures) return calcOffset(timeZone, captures.slice(1));\n    return NaN;\n  }\n}\nconst offsetRe = /([+-]\\d\\d):?(\\d\\d)?/;\nfunction calcOffset(cacheStr, values) {\n  const hours = +values[0];\n  const minutes = +(values[1] || 0);\n  return offsetCache[cacheStr] = hours > 0 ? hours * 60 + minutes : hours * 60 - minutes;\n}"],"mappings":"AAAA,MAAMA,iBAAiB,GAAG,CAAC,CAAC;AAC5B,MAAMC,WAAW,GAAG,CAAC,CAAC;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,QAAQA,CAACC,QAAQ,EAAEC,IAAI,EAAE;EACvC,IAAI;IACF,MAAMC,MAAM,GAAGL,iBAAiB,CAACG,QAAQ,CAAC,KAAK,IAAIG,IAAI,CAACC,cAAc,CAAC,OAAO,EAAE;MAC9EJ,QAAQ;MACRK,IAAI,EAAE,SAAS;MACfC,YAAY,EAAE;IAChB,CAAC,CAAC,CAACJ,MAAM;IACT,MAAMK,SAAS,GAAGL,MAAM,CAACD,IAAI,CAAC,CAACO,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE;IACpD,IAAID,SAAS,IAAIT,WAAW,EAAE,OAAOA,WAAW,CAACS,SAAS,CAAC;IAC3D,OAAOE,UAAU,CAACF,SAAS,EAAEA,SAAS,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC;EACpD,CAAC,CAAC,MAAM;IACN;IACA;IACA,IAAIR,QAAQ,IAAIF,WAAW,EAAE,OAAOA,WAAW,CAACE,QAAQ,CAAC;IACzD,MAAMU,QAAQ,GAAGV,QAAQ,EAAEW,KAAK,CAACC,QAAQ,CAAC;IAC1C,IAAIF,QAAQ,EAAE,OAAOD,UAAU,CAACT,QAAQ,EAAEU,QAAQ,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC;IAC5D,OAAOC,GAAG;EACZ;AACF;AACA,MAAMF,QAAQ,GAAG,qBAAqB;AACtC,SAASH,UAAUA,CAACM,QAAQ,EAAEC,MAAM,EAAE;EACpC,MAAMC,KAAK,GAAG,CAACD,MAAM,CAAC,CAAC,CAAC;EACxB,MAAME,OAAO,GAAG,EAAEF,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;EACjC,OAAOlB,WAAW,CAACiB,QAAQ,CAAC,GAAGE,KAAK,GAAG,CAAC,GAAGA,KAAK,GAAG,EAAE,GAAGC,OAAO,GAAGD,KAAK,GAAG,EAAE,GAAGC,OAAO;AACxF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}