{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/Users/paulius/Downloads/Projects/Meta Ads Uploader/frontend/node_modules/react-day-picker/src/types/shared.ts"],"sourcesContent":["import type { CSSProperties } from \"react\";\n\nimport { UI, DayFlag, SelectionState, Animation } from \"../UI.js\";\nimport * as components from \"../components/custom-components.js\";\nimport {\n  formatCaption,\n  formatDay,\n  formatMonthCaption,\n  formatMonthDropdown,\n  formatWeekdayName,\n  formatWeekNumber,\n  formatWeekNumberHeader,\n  formatYearCaption,\n  formatYearDropdown\n} from \"../formatters/index.js\";\nimport {\n  labelDayButton,\n  labelNav,\n  labelGrid,\n  labelGridcell,\n  labelMonthDropdown,\n  labelNext,\n  labelPrevious,\n  labelWeekday,\n  labelWeekNumber,\n  labelWeekNumberHeader,\n  labelYearDropdown\n} from \"../labels/index.js\";\n\n/**\n * Selection modes supported by DayPicker.\n *\n * - `single`: Select a single day.\n * - `multiple`: Select multiple days.\n * - `range`: Select a range of days.\n *\n * @see https://daypicker.dev/docs/selection-modes\n */\nexport type Mode = \"single\" | \"multiple\" | \"range\";\n\n/**\n * The components that can be customized using the `components` prop.\n *\n * @see https://daypicker.dev/guides/custom-components\n */\nexport type CustomComponents = {\n  /**\n   * Render any button element in DayPicker.\n   *\n   * @deprecated Use {@link CustomComponents.NextMonthButton} or\n   *   {@link CustomComponents.PreviousMonthButton} instead.\n   */\n  Button: typeof components.Button;\n  /** Render the chevron icon used in the navigation buttons and dropdowns. */\n  Chevron: typeof components.Chevron;\n  /** Render the caption label of the month grid. */\n  CaptionLabel: typeof components.CaptionLabel;\n  /** Render the day cell in the month grid. */\n  Day: typeof components.Day;\n  /** Render the button containing the day in the day cell. */\n  DayButton: typeof components.DayButton;\n  /** Render the dropdown element to select years and months. */\n  Dropdown: typeof components.Dropdown;\n  /** Render the container of the dropdowns. */\n  DropdownNav: typeof components.DropdownNav;\n  /** Render the footer element announced by screen readers. */\n  Footer: typeof components.Footer;\n  /** Render the container of the MonthGrid. */\n  Month: typeof components.Month;\n  /** Render the caption of the month grid. */\n  MonthCaption: typeof components.MonthCaption;\n  /** Render the grid of days in a month. */\n  MonthGrid: typeof components.MonthGrid;\n  /** Wrapper of the month grids. */\n  Months: typeof components.Months;\n  /** Render the navigation element with the next and previous buttons. */\n  Nav: typeof components.Nav;\n  /** Render the `<option>` HTML element in the dropdown. */\n  Option: typeof components.Option;\n  /** Render the previous month button element in the navigation. */\n  PreviousMonthButton: typeof components.PreviousMonthButton;\n  /** Render the next month button element in the navigation. */\n  NextMonthButton: typeof components.NextMonthButton;\n  /** Render the root element of the calendar. */\n  Root: typeof components.Root;\n  /** Render the select element in the dropdowns. */\n  Select: typeof components.Select;\n  /** Render the weeks section in the month grid. */\n  Weeks: typeof components.Weeks;\n  /** Render the week rows. */\n  Week: typeof components.Week;\n  /** Render the weekday name in the header. */\n  Weekday: typeof components.Weekday;\n  /** Render the row containing the week days. */\n  Weekdays: typeof components.Weekdays;\n  /** Render the cell with the number of the week. */\n  WeekNumber: typeof components.WeekNumber;\n  /** Render the header of the week number column. */\n  WeekNumberHeader: typeof components.WeekNumberHeader;\n  /** Render the dropdown for selecting months. */\n  MonthsDropdown: typeof components.MonthsDropdown;\n  /** Render the dropdown for selecting years. */\n  YearsDropdown: typeof components.YearsDropdown;\n};\n\n/** Represents a map of formatters used to render localized content. */\nexport type Formatters = {\n  /** Format the caption of a month grid. */\n  formatCaption: typeof formatCaption;\n  /** Format the day in the day cell. */\n  formatDay: typeof formatDay;\n  /** Format the label in the month dropdown. */\n  formatMonthDropdown: typeof formatMonthDropdown;\n  /**\n   * @ignore\n   * @deprecated Use {@link Formatters.formatCaption} instead.\n   *\n   *   **Note:** This formatter will be removed in version 10.0.0.\n   */\n  formatMonthCaption: typeof formatMonthCaption;\n  /** Format the week number. */\n  formatWeekNumber: typeof formatWeekNumber;\n  /** Format the header of the week number column. */\n  formatWeekNumberHeader: typeof formatWeekNumberHeader;\n  /** Format the week day name in the header. */\n  formatWeekdayName: typeof formatWeekdayName;\n  /** Format the label in the year dropdown. */\n  formatYearDropdown: typeof formatYearDropdown;\n  /**\n   * @ignore\n   * @deprecated Use {@link Formatters.formatYearDropdown} instead.\n   */\n  formatYearCaption: typeof formatYearCaption;\n};\n\n/** A map of functions to translate ARIA labels for various elements. */\nexport type Labels = {\n  /** The label for the navigation toolbar. */\n  labelNav: typeof labelNav;\n  /** The label for the month grid. */\n  labelGrid: typeof labelGrid;\n  /** The label for the gridcell, when the calendar is not interactive. */\n  labelGridcell: typeof labelGridcell;\n  /** The label for the month dropdown. */\n  labelMonthDropdown: typeof labelMonthDropdown;\n  /** The label for the year dropdown. */\n  labelYearDropdown: typeof labelYearDropdown;\n  /** The label for the \"next month\" button. */\n  labelNext: typeof labelNext;\n  /** The label for the \"previous month\" button. */\n  labelPrevious: typeof labelPrevious;\n  /** The label for the day button. */\n  labelDayButton: typeof labelDayButton;\n  /**\n   * @ignore\n   * @deprecated Use {@link labelDayButton} instead.\n   */\n  labelDay: typeof labelDayButton;\n  /** The label for the weekday. */\n  labelWeekday: typeof labelWeekday;\n  /** The label for the week number. */\n  labelWeekNumber: typeof labelWeekNumber;\n  /** The label for the column of week numbers. */\n  labelWeekNumberHeader: typeof labelWeekNumberHeader;\n};\n\n/**\n * A value or a function that matches specific days.\n *\n * @example\n *   // Match weekends and specific holidays\n *   const matcher: Matcher = [\n *     { dayOfWeek: [0, 6] }, // Weekends\n *     { from: new Date(2023, 11, 24), to: new Date(2023, 11, 26) } // Christmas\n *   ];\n */\nexport type Matcher =\n  | boolean\n  | ((date: Date) => boolean)\n  | Date\n  | Date[]\n  | DateRange\n  | DateBefore\n  | DateAfter\n  | DateInterval\n  | DayOfWeek;\n\n/**\n * Match a day falling after the specified date (exclusive).\n *\n * @example\n *   // Match days after February 2, 2019\n *   const matcher: DateAfter = { after: new Date(2019, 1, 2) };\n */\nexport type DateAfter = { after: Date };\n\n/**\n * Match a day falling before the specified date (exclusive).\n *\n * @example\n *   // Match days before February 2, 2019\n *   const matcher: DateBefore = { before: new Date(2019, 1, 2) };\n */\nexport type DateBefore = { before: Date };\n\n/**\n * An interval of dates. Unlike {@link DateRange}, the range ends are not\n * included.\n *\n * @example\n *   // Match days between February 2 and February 5, 2019\n *   const matcher: DateInterval = {\n *     after: new Date(2019, 1, 2),\n *     before: new Date(2019, 1, 5)\n *   };\n */\nexport type DateInterval = { before: Date; after: Date };\n\n/**\n * A range of dates. Unlike {@link DateInterval}, the range ends are included.\n *\n * @example\n *   // Match days between February 2 and February 5, 2019\n *   const matcher: DateRange = {\n *     from: new Date(2019, 1, 2),\n *     to: new Date(2019, 1, 5)\n *   };\n */\nexport type DateRange = { from: Date | undefined; to?: Date | undefined };\n\n/**\n * Match days of the week (`0-6`, where `0` is Sunday).\n *\n * @example\n *   // Match Sundays\n *   const matcher: DayOfWeek = { dayOfWeek: 0 };\n *   // Match weekends\n *   const matcher: DayOfWeek = { dayOfWeek: [0, 6] };\n */\nexport type DayOfWeek = { dayOfWeek: number | number[] };\n\n/**\n * The event handler triggered when clicking or interacting with a day.\n *\n * @template EventType - The event type that triggered the event (e.g.\n *   `React.MouseEvent`, `React.KeyboardEvent`, etc.).\n * @param date - The date that has triggered the event.\n * @param modifiers - The modifiers belonging to the date.\n * @param e - The DOM event that triggered the event.\n */\nexport type DayEventHandler<EventType> = (\n  date: Date,\n  modifiers: Modifiers,\n  e: EventType\n) => void;\n\n/**\n * The event handler when a month is changed in the calendar.\n *\n * ```tsx\n * <DayPicker onMonthChange={(month) => console.log(month)} />\n * ```\n *\n * @see https://daypicker.dev/docs/navigation\n */\nexport type MonthChangeEventHandler = (month: Date) => void;\n\n/**\n * The CSS classnames to use for the {@link UI} elements, the\n * {@link SelectionState} and the {@link DayFlag}.\n *\n * @example\n *   const classNames: ClassNames = {\n *     [UI.Root]: \"root\",\n *     [UI.Outside]: \"outside\",\n *     [UI.Nav]: \"nav\"\n *     // etc.\n *   };\n */\nexport type ClassNames = {\n  [key in UI | SelectionState | DayFlag | Animation]: string;\n};\n\n/**\n * The CSS styles to use for the {@link UI} elements, the {@link SelectionState}\n * and the {@link DayFlag}.\n */\nexport type Styles = {\n  [key in UI | SelectionState | DayFlag]: CSSProperties | undefined;\n};\n\n/**\n * Represents the modifiers that match a specific day in the calendar.\n *\n * @example\n *   const modifiers: Modifiers = {\n *     today: true, // The day is today\n *     selected: false, // The day is not selected\n *     weekend: true // Custom modifier for weekends\n *   };\n *\n * @see https://daypicker.dev/guides/custom-modifiers\n */\nexport type Modifiers = Record<string, boolean>;\n\n/**\n * The style to apply to each day element matching a modifier.\n *\n * @example\n *   const modifiersStyles: ModifiersStyles = {\n *     today: { color: \"red\" },\n *     selected: { backgroundColor: \"blue\" },\n *     weekend: { color: \"green\" }\n *   };\n */\nexport type ModifiersStyles = Record<string, CSSProperties>;\n\n/**\n * The classnames to assign to each day element matching a modifier.\n *\n * @example\n *   const modifiersClassNames: ModifiersClassNames = {\n *     today: \"today\", // Use the \"today\" class for the today's day\n *     selected: \"highlight\", // Use the \"highlight\" class for the selected day\n *     weekend: \"weekend\" // Use the \"weekend\" class for the weekend days\n *   };\n */\nexport type ModifiersClassNames = Record<string, string>;\n\n/**\n * The props that have been deprecated since version 9.0.0.\n *\n * @private\n * @since 9.0.0\n * @see https://daypicker.dev/upgrading\n */\nexport type V9DeprecatedProps =\n  /** Use `hidden` prop instead. */\n  | \"fromDate\"\n  /** Use `hidden` prop instead. */\n  | \"toDate\"\n  /** Use `startMonth` instead. */\n  | \"fromMonth\"\n  /** Use `endMonth` instead. */\n  | \"toMonth\"\n  /** Use `startMonth` instead. */\n  | \"fromYear\"\n  /** Use `endMonth` instead. */\n  | \"toYear\";\n\n/** The direction to move the focus relative to the current focused date. */\nexport type MoveFocusDir = \"after\" | \"before\";\n\n/** The temporal unit to move the focus by. */\nexport type MoveFocusBy =\n  | \"day\"\n  | \"week\"\n  | \"startOfWeek\"\n  | \"endOfWeek\"\n  | \"month\"\n  | \"year\";\n\n/**\n * The numbering system supported by DayPicker.\n *\n * - `latn`: Latin (Western Arabic)\n * - `arab`: Arabic-Indic\n * - `arabext`: Eastern Arabic-Indic (Persian)\n * - `deva`: Devanagari\n * - `beng`: Bengali\n * - `guru`: Gurmukhi\n * - `gujr`: Gujarati\n * - `orya`: Oriya\n * - `tamldec`: Tamil\n * - `telu`: Telugu\n * - `knda`: Kannada\n * - `mlym`: Malayalam\n *\n * @see https://daypicker.dev/docs/translation#numeral-systems\n */\nexport type Numerals =\n  | \"latn\"\n  | \"arab\"\n  | \"arabext\"\n  | \"deva\"\n  | \"beng\"\n  | \"guru\"\n  | \"gujr\"\n  | \"orya\"\n  | \"tamldec\"\n  | \"telu\"\n  | \"knda\"\n  | \"mlym\";\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}