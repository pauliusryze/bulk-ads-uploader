{"ast":null,"code":"import { defaultDateLib } from \"../classes/DateLib.js\";\n/**\n * Adds a date to an existing range, considering constraints like minimum and\n * maximum range size.\n *\n * @param date - The date to add to the range.\n * @param initialRange - The initial range to which the date will be added.\n * @param min - The minimum number of days in the range.\n * @param max - The maximum number of days in the range.\n * @param required - Whether the range must always include at least one date.\n * @param dateLib - The date utility library instance.\n * @returns The updated date range, or `undefined` if the range is cleared.\n * @group Utilities\n */\nexport function addToRange(date, initialRange) {\n  let min = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let max = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  let required = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  let dateLib = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : defaultDateLib;\n  const {\n    from,\n    to\n  } = initialRange || {};\n  const {\n    isSameDay,\n    isAfter,\n    isBefore\n  } = dateLib;\n  let range;\n  if (!from && !to) {\n    // the range is empty, add the date\n    range = {\n      from: date,\n      to: min > 0 ? undefined : date\n    };\n  } else if (from && !to) {\n    // adding date to an incomplete range\n    if (isSameDay(from, date)) {\n      // adding a date equal to the start of the range\n      if (required) {\n        range = {\n          from,\n          to: undefined\n        };\n      } else {\n        range = undefined;\n      }\n    } else if (isBefore(date, from)) {\n      // adding a date before the start of the range\n      range = {\n        from: date,\n        to: from\n      };\n    } else {\n      // adding a date after the start of the range\n      range = {\n        from,\n        to: date\n      };\n    }\n  } else if (from && to) {\n    // adding date to a complete range\n    if (isSameDay(from, date) && isSameDay(to, date)) {\n      // adding a date that is equal to both start and end of the range\n      if (required) {\n        range = {\n          from,\n          to\n        };\n      } else {\n        range = undefined;\n      }\n    } else if (isSameDay(from, date)) {\n      // adding a date equal to the the start of the range\n      range = {\n        from,\n        to: min > 0 ? undefined : date\n      };\n    } else if (isSameDay(to, date)) {\n      // adding a dare equal to the end of the range\n      range = {\n        from: date,\n        to: min > 0 ? undefined : date\n      };\n    } else if (isBefore(date, from)) {\n      // adding a date before the start of the range\n      range = {\n        from: date,\n        to: to\n      };\n    } else if (isAfter(date, from)) {\n      // adding a date after the start of the range\n      range = {\n        from,\n        to: date\n      };\n    } else if (isAfter(date, to)) {\n      // adding a date after the end of the range\n      range = {\n        from,\n        to: date\n      };\n    } else {\n      throw new Error(\"Invalid range\");\n    }\n  }\n  // check for min / max\n  if (range?.from && range?.to) {\n    const diff = dateLib.differenceInCalendarDays(range.to, range.from);\n    if (max > 0 && diff > max) {\n      range = {\n        from: date,\n        to: undefined\n      };\n    } else if (min > 1 && diff < min) {\n      range = {\n        from: date,\n        to: undefined\n      };\n    }\n  }\n  return range;\n}","map":{"version":3,"names":["defaultDateLib","addToRange","date","initialRange","min","arguments","length","undefined","max","required","dateLib","from","to","isSameDay","isAfter","isBefore","range","Error","diff","differenceInCalendarDays"],"sources":["/Users/paulius/Downloads/Projects/Meta Ads Uploader/frontend/node_modules/react-day-picker/src/utils/addToRange.ts"],"sourcesContent":["import { defaultDateLib, type DateLib } from \"../classes/DateLib.js\";\nimport type { DateRange } from \"../types/index.js\";\n\n/**\n * Adds a date to an existing range, considering constraints like minimum and\n * maximum range size.\n *\n * @param date - The date to add to the range.\n * @param initialRange - The initial range to which the date will be added.\n * @param min - The minimum number of days in the range.\n * @param max - The maximum number of days in the range.\n * @param required - Whether the range must always include at least one date.\n * @param dateLib - The date utility library instance.\n * @returns The updated date range, or `undefined` if the range is cleared.\n * @group Utilities\n */\nexport function addToRange(\n  date: Date,\n  initialRange: DateRange | undefined,\n  min = 0,\n  max = 0,\n  required = false,\n  dateLib: DateLib = defaultDateLib\n): DateRange | undefined {\n  const { from, to } = initialRange || {};\n  const { isSameDay, isAfter, isBefore } = dateLib;\n\n  let range: DateRange | undefined;\n\n  if (!from && !to) {\n    // the range is empty, add the date\n    range = { from: date, to: min > 0 ? undefined : date };\n  } else if (from && !to) {\n    // adding date to an incomplete range\n    if (isSameDay(from, date)) {\n      // adding a date equal to the start of the range\n      if (required) {\n        range = { from, to: undefined };\n      } else {\n        range = undefined;\n      }\n    } else if (isBefore(date, from)) {\n      // adding a date before the start of the range\n      range = { from: date, to: from };\n    } else {\n      // adding a date after the start of the range\n      range = { from, to: date };\n    }\n  } else if (from && to) {\n    // adding date to a complete range\n    if (isSameDay(from, date) && isSameDay(to, date)) {\n      // adding a date that is equal to both start and end of the range\n      if (required) {\n        range = { from, to };\n      } else {\n        range = undefined;\n      }\n    } else if (isSameDay(from, date)) {\n      // adding a date equal to the the start of the range\n      range = { from, to: min > 0 ? undefined : date };\n    } else if (isSameDay(to, date)) {\n      // adding a dare equal to the end of the range\n      range = { from: date, to: min > 0 ? undefined : date };\n    } else if (isBefore(date, from)) {\n      // adding a date before the start of the range\n      range = { from: date, to: to };\n    } else if (isAfter(date, from)) {\n      // adding a date after the start of the range\n      range = { from, to: date };\n    } else if (isAfter(date, to)) {\n      // adding a date after the end of the range\n      range = { from, to: date };\n    } else {\n      throw new Error(\"Invalid range\");\n    }\n  }\n\n  // check for min / max\n  if (range?.from && range?.to) {\n    const diff = dateLib.differenceInCalendarDays(range.to, range.from);\n    if (max > 0 && diff > max) {\n      range = { from: date, to: undefined };\n    } else if (min > 1 && diff < min) {\n      range = { from: date, to: undefined };\n    }\n  }\n\n  return range;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}