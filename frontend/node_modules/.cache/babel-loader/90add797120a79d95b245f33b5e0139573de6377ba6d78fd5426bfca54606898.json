{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport FacebookAPIClient from '../lib/facebook-api';\nexport const useFacebookAuth = () => {\n  _s();\n  const [authState, setAuthState] = useState({\n    isAuthenticated: false,\n    accessToken: null,\n    adAccounts: [],\n    pages: [],\n    selectedAdAccount: null,\n    selectedPage: null,\n    customAudiences: [],\n    isLoading: false,\n    error: null\n  });\n  const [apiClient, setApiClient] = useState(null);\n\n  // Initialize Facebook SDK\n  useEffect(() => {\n    const initFacebookSDK = () => {\n      if (window.FB) {\n        window.FB.init({\n          appId: process.env.REACT_APP_FACEBOOK_APP_ID || 'your-app-id',\n          cookie: true,\n          xfbml: true,\n          version: 'v18.0'\n        });\n      }\n    };\n\n    // Load Facebook SDK\n    if (!window.FB) {\n      const script = document.createElement('script');\n      script.src = 'https://connect.facebook.net/en_US/sdk.js';\n      script.async = true;\n      script.defer = true;\n      script.crossOrigin = 'anonymous';\n      script.onload = initFacebookSDK;\n      document.head.appendChild(script);\n    } else {\n      initFacebookSDK();\n    }\n  }, []);\n\n  // Facebook Login\n  const login = async () => {\n    setAuthState(prev => ({\n      ...prev,\n      isLoading: true,\n      error: null\n    }));\n    try {\n      // Check if we're in development mode and Facebook SDK isn't available\n      if (process.env.NODE_ENV === 'development' && !window.FB) {\n        // Mock login for development\n        console.log('Development mode: Using mock Facebook login');\n\n        // Simulate successful login\n        const mockAccessToken = 'mock-access-token-for-development';\n        const mockAdAccounts = [{\n          id: 'act_123456789',\n          name: 'Test Ad Account',\n          currency: 'USD',\n          timezone: 'America/New_York'\n        }];\n        const mockPages = [{\n          id: '123456789',\n          name: 'Test Page',\n          category: 'Business',\n          access_token: 'mock-page-token'\n        }];\n        setAuthState(prev => ({\n          ...prev,\n          isAuthenticated: true,\n          accessToken: mockAccessToken,\n          adAccounts: mockAdAccounts,\n          pages: mockPages,\n          isLoading: false\n        }));\n\n        // Create mock API client\n        const mockClient = new FacebookAPIClient({\n          appId: 'mock-app-id',\n          accessToken: mockAccessToken,\n          adAccountId: mockAdAccounts[0].id,\n          sandboxMode: true\n        });\n        setApiClient(mockClient);\n        return;\n      }\n      const response = await new Promise((resolve, reject) => {\n        window.FB.login(response => {\n          if (response.authResponse) {\n            resolve(response);\n          } else {\n            reject(new Error('Facebook login failed'));\n          }\n        }, {\n          scope: 'ads_management,pages_read_engagement,pages_manage_ads',\n          return_scopes: true\n        });\n      });\n      const {\n        accessToken\n      } = response.authResponse;\n\n      // Initialize API client\n      const client = new FacebookAPIClient({\n        appId: process.env.REACT_APP_FACEBOOK_APP_ID || 'your-app-id',\n        accessToken,\n        adAccountId: '',\n        // Will be set when user selects an ad account\n        sandboxMode: true // Start in sandbox mode for safety\n      });\n      setApiClient(client);\n\n      // Get user's ad accounts and pages\n      const [adAccountsResponse, pagesResponse] = await Promise.all([client.getAdAccounts(), client.getPages()]);\n      setAuthState(prev => ({\n        ...prev,\n        isAuthenticated: true,\n        accessToken,\n        adAccounts: adAccountsResponse.data,\n        pages: pagesResponse.data,\n        isLoading: false\n      }));\n    } catch (error) {\n      setAuthState(prev => ({\n        ...prev,\n        isLoading: false,\n        error: error instanceof Error ? error.message : 'Login failed'\n      }));\n    }\n  };\n\n  // Logout\n  const logout = () => {\n    if (window.FB) {\n      window.FB.logout(() => {\n        setAuthState({\n          isAuthenticated: false,\n          accessToken: null,\n          adAccounts: [],\n          pages: [],\n          selectedAdAccount: null,\n          selectedPage: null,\n          customAudiences: [],\n          isLoading: false,\n          error: null\n        });\n        setApiClient(null);\n      });\n    } else {\n      // Mock logout for development\n      setAuthState({\n        isAuthenticated: false,\n        accessToken: null,\n        adAccounts: [],\n        pages: [],\n        selectedAdAccount: null,\n        selectedPage: null,\n        customAudiences: [],\n        isLoading: false,\n        error: null\n      });\n      setApiClient(null);\n    }\n  };\n\n  // Select ad account\n  const selectAdAccount = async adAccount => {\n    if (!apiClient) return;\n    setAuthState(prev => ({\n      ...prev,\n      isLoading: true,\n      error: null\n    }));\n    try {\n      // Update API client with selected ad account\n      const updatedClient = new FacebookAPIClient({\n        appId: process.env.REACT_APP_FACEBOOK_APP_ID || 'your-app-id',\n        accessToken: authState.accessToken,\n        adAccountId: adAccount.id,\n        sandboxMode: true\n      });\n      setApiClient(updatedClient);\n\n      // Get custom audiences for this ad account\n      const customAudiencesResponse = await updatedClient.getCustomAudiences(adAccount.id);\n      setAuthState(prev => ({\n        ...prev,\n        selectedAdAccount: adAccount,\n        customAudiences: customAudiencesResponse.data,\n        isLoading: false\n      }));\n    } catch (error) {\n      setAuthState(prev => ({\n        ...prev,\n        isLoading: false,\n        error: error instanceof Error ? error.message : 'Failed to load ad account data'\n      }));\n    }\n  };\n\n  // Select page\n  const selectPage = page => {\n    setAuthState(prev => ({\n      ...prev,\n      selectedPage: page\n    }));\n  };\n  return {\n    ...authState,\n    apiClient,\n    login,\n    logout,\n    selectAdAccount,\n    selectPage\n  };\n};\n_s(useFacebookAuth, \"osScM2MJDbVa1NbNRxs16Akdf40=\");","map":{"version":3,"names":["useState","useEffect","FacebookAPIClient","useFacebookAuth","_s","authState","setAuthState","isAuthenticated","accessToken","adAccounts","pages","selectedAdAccount","selectedPage","customAudiences","isLoading","error","apiClient","setApiClient","initFacebookSDK","window","FB","init","appId","process","env","REACT_APP_FACEBOOK_APP_ID","cookie","xfbml","version","script","document","createElement","src","async","defer","crossOrigin","onload","head","appendChild","login","prev","NODE_ENV","console","log","mockAccessToken","mockAdAccounts","id","name","currency","timezone","mockPages","category","access_token","mockClient","adAccountId","sandboxMode","response","Promise","resolve","reject","authResponse","Error","scope","return_scopes","client","adAccountsResponse","pagesResponse","all","getAdAccounts","getPages","data","message","logout","selectAdAccount","adAccount","updatedClient","customAudiencesResponse","getCustomAudiences","selectPage","page"],"sources":["/Users/paulius/Downloads/Projects/Meta Ads Uploader/frontend/src/hooks/useFacebookAuth.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport FacebookAPIClient, { \n  FacebookAPIConfig, \n  FacebookAdAccount, \n  FacebookPage,\n  FacebookCustomAudience \n} from '../lib/facebook-api';\nimport { FacebookAuthResponse } from '../types/facebook';\n\nexport interface FacebookAuthState {\n  isAuthenticated: boolean;\n  accessToken: string | null;\n  adAccounts: FacebookAdAccount[];\n  pages: FacebookPage[];\n  selectedAdAccount: FacebookAdAccount | null;\n  selectedPage: FacebookPage | null;\n  customAudiences: FacebookCustomAudience[];\n  isLoading: boolean;\n  error: string | null;\n}\n\nexport const useFacebookAuth = () => {\n  const [authState, setAuthState] = useState<FacebookAuthState>({\n    isAuthenticated: false,\n    accessToken: null,\n    adAccounts: [],\n    pages: [],\n    selectedAdAccount: null,\n    selectedPage: null,\n    customAudiences: [],\n    isLoading: false,\n    error: null,\n  });\n\n  const [apiClient, setApiClient] = useState<FacebookAPIClient | null>(null);\n\n  // Initialize Facebook SDK\n  useEffect(() => {\n    const initFacebookSDK = () => {\n      if (window.FB) {\n        window.FB.init({\n          appId: process.env.REACT_APP_FACEBOOK_APP_ID || 'your-app-id',\n          cookie: true,\n          xfbml: true,\n          version: 'v18.0',\n        });\n      }\n    };\n\n    // Load Facebook SDK\n    if (!window.FB) {\n      const script = document.createElement('script');\n      script.src = 'https://connect.facebook.net/en_US/sdk.js';\n      script.async = true;\n      script.defer = true;\n      script.crossOrigin = 'anonymous';\n      script.onload = initFacebookSDK;\n      document.head.appendChild(script);\n    } else {\n      initFacebookSDK();\n    }\n  }, []);\n\n  // Facebook Login\n  const login = async (): Promise<void> => {\n    setAuthState(prev => ({ ...prev, isLoading: true, error: null }));\n\n    try {\n      // Check if we're in development mode and Facebook SDK isn't available\n      if (process.env.NODE_ENV === 'development' && !window.FB) {\n        // Mock login for development\n        console.log('Development mode: Using mock Facebook login');\n        \n        // Simulate successful login\n        const mockAccessToken = 'mock-access-token-for-development';\n        const mockAdAccounts = [\n          { id: 'act_123456789', name: 'Test Ad Account', currency: 'USD', timezone: 'America/New_York' }\n        ];\n        const mockPages = [\n          { id: '123456789', name: 'Test Page', category: 'Business', access_token: 'mock-page-token' }\n        ];\n\n        setAuthState(prev => ({\n          ...prev,\n          isAuthenticated: true,\n          accessToken: mockAccessToken,\n          adAccounts: mockAdAccounts,\n          pages: mockPages,\n          isLoading: false,\n        }));\n\n        // Create mock API client\n        const mockClient = new FacebookAPIClient({\n          appId: 'mock-app-id',\n          accessToken: mockAccessToken,\n          adAccountId: mockAdAccounts[0].id,\n          sandboxMode: true,\n        });\n\n        setApiClient(mockClient);\n        return;\n      }\n\n      const response = await new Promise<{ authResponse: { accessToken: string } }>((resolve, reject) => {\n        window.FB.login((response) => {\n          if (response.authResponse) {\n            resolve(response as { authResponse: { accessToken: string } });\n          } else {\n            reject(new Error('Facebook login failed'));\n          }\n        }, {\n          scope: 'ads_management,pages_read_engagement,pages_manage_ads',\n          return_scopes: true,\n        });\n      });\n\n      const { accessToken } = response.authResponse;\n      \n      // Initialize API client\n      const client = new FacebookAPIClient({\n        appId: process.env.REACT_APP_FACEBOOK_APP_ID || 'your-app-id',\n        accessToken,\n        adAccountId: '', // Will be set when user selects an ad account\n        sandboxMode: true, // Start in sandbox mode for safety\n      });\n\n      setApiClient(client);\n\n      // Get user's ad accounts and pages\n      const [adAccountsResponse, pagesResponse] = await Promise.all([\n        client.getAdAccounts(),\n        client.getPages(),\n      ]);\n\n      setAuthState(prev => ({\n        ...prev,\n        isAuthenticated: true,\n        accessToken,\n        adAccounts: adAccountsResponse.data,\n        pages: pagesResponse.data,\n        isLoading: false,\n      }));\n\n    } catch (error) {\n      setAuthState(prev => ({\n        ...prev,\n        isLoading: false,\n        error: error instanceof Error ? error.message : 'Login failed',\n      }));\n    }\n  };\n\n  // Logout\n  const logout = (): void => {\n    if (window.FB) {\n      window.FB.logout(() => {\n        setAuthState({\n          isAuthenticated: false,\n          accessToken: null,\n          adAccounts: [],\n          pages: [],\n          selectedAdAccount: null,\n          selectedPage: null,\n          customAudiences: [],\n          isLoading: false,\n          error: null,\n        });\n        setApiClient(null);\n      });\n    } else {\n      // Mock logout for development\n      setAuthState({\n        isAuthenticated: false,\n        accessToken: null,\n        adAccounts: [],\n        pages: [],\n        selectedAdAccount: null,\n        selectedPage: null,\n        customAudiences: [],\n        isLoading: false,\n        error: null,\n      });\n      setApiClient(null);\n    }\n  };\n\n  // Select ad account\n  const selectAdAccount = async (adAccount: FacebookAdAccount): Promise<void> => {\n    if (!apiClient) return;\n\n    setAuthState(prev => ({ ...prev, isLoading: true, error: null }));\n\n    try {\n      // Update API client with selected ad account\n      const updatedClient = new FacebookAPIClient({\n        appId: process.env.REACT_APP_FACEBOOK_APP_ID || 'your-app-id',\n        accessToken: authState.accessToken!,\n        adAccountId: adAccount.id,\n        sandboxMode: true,\n      });\n\n      setApiClient(updatedClient);\n\n      // Get custom audiences for this ad account\n      const customAudiencesResponse = await updatedClient.getCustomAudiences(adAccount.id);\n\n      setAuthState(prev => ({\n        ...prev,\n        selectedAdAccount: adAccount,\n        customAudiences: customAudiencesResponse.data,\n        isLoading: false,\n      }));\n\n    } catch (error) {\n      setAuthState(prev => ({\n        ...prev,\n        isLoading: false,\n        error: error instanceof Error ? error.message : 'Failed to load ad account data',\n      }));\n    }\n  };\n\n  // Select page\n  const selectPage = (page: FacebookPage): void => {\n    setAuthState(prev => ({\n      ...prev,\n      selectedPage: page,\n    }));\n  };\n\n  return {\n    ...authState,\n    apiClient,\n    login,\n    logout,\n    selectAdAccount,\n    selectPage,\n  };\n}; "],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,iBAAiB,MAKjB,qBAAqB;AAe5B,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAoB;IAC5DO,eAAe,EAAE,KAAK;IACtBC,WAAW,EAAE,IAAI;IACjBC,UAAU,EAAE,EAAE;IACdC,KAAK,EAAE,EAAE;IACTC,iBAAiB,EAAE,IAAI;IACvBC,YAAY,EAAE,IAAI;IAClBC,eAAe,EAAE,EAAE;IACnBC,SAAS,EAAE,KAAK;IAChBC,KAAK,EAAE;EACT,CAAC,CAAC;EAEF,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAA2B,IAAI,CAAC;;EAE1E;EACAC,SAAS,CAAC,MAAM;IACd,MAAMiB,eAAe,GAAGA,CAAA,KAAM;MAC5B,IAAIC,MAAM,CAACC,EAAE,EAAE;QACbD,MAAM,CAACC,EAAE,CAACC,IAAI,CAAC;UACbC,KAAK,EAAEC,OAAO,CAACC,GAAG,CAACC,yBAAyB,IAAI,aAAa;UAC7DC,MAAM,EAAE,IAAI;UACZC,KAAK,EAAE,IAAI;UACXC,OAAO,EAAE;QACX,CAAC,CAAC;MACJ;IACF,CAAC;;IAED;IACA,IAAI,CAACT,MAAM,CAACC,EAAE,EAAE;MACd,MAAMS,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MAC/CF,MAAM,CAACG,GAAG,GAAG,2CAA2C;MACxDH,MAAM,CAACI,KAAK,GAAG,IAAI;MACnBJ,MAAM,CAACK,KAAK,GAAG,IAAI;MACnBL,MAAM,CAACM,WAAW,GAAG,WAAW;MAChCN,MAAM,CAACO,MAAM,GAAGlB,eAAe;MAC/BY,QAAQ,CAACO,IAAI,CAACC,WAAW,CAACT,MAAM,CAAC;IACnC,CAAC,MAAM;MACLX,eAAe,CAAC,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMqB,KAAK,GAAG,MAAAA,CAAA,KAA2B;IACvCjC,YAAY,CAACkC,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAE1B,SAAS,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC,CAAC;IAEjE,IAAI;MACF;MACA,IAAIQ,OAAO,CAACC,GAAG,CAACiB,QAAQ,KAAK,aAAa,IAAI,CAACtB,MAAM,CAACC,EAAE,EAAE;QACxD;QACAsB,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;;QAE1D;QACA,MAAMC,eAAe,GAAG,mCAAmC;QAC3D,MAAMC,cAAc,GAAG,CACrB;UAAEC,EAAE,EAAE,eAAe;UAAEC,IAAI,EAAE,iBAAiB;UAAEC,QAAQ,EAAE,KAAK;UAAEC,QAAQ,EAAE;QAAmB,CAAC,CAChG;QACD,MAAMC,SAAS,GAAG,CAChB;UAAEJ,EAAE,EAAE,WAAW;UAAEC,IAAI,EAAE,WAAW;UAAEI,QAAQ,EAAE,UAAU;UAAEC,YAAY,EAAE;QAAkB,CAAC,CAC9F;QAED9C,YAAY,CAACkC,IAAI,KAAK;UACpB,GAAGA,IAAI;UACPjC,eAAe,EAAE,IAAI;UACrBC,WAAW,EAAEoC,eAAe;UAC5BnC,UAAU,EAAEoC,cAAc;UAC1BnC,KAAK,EAAEwC,SAAS;UAChBpC,SAAS,EAAE;QACb,CAAC,CAAC,CAAC;;QAEH;QACA,MAAMuC,UAAU,GAAG,IAAInD,iBAAiB,CAAC;UACvCoB,KAAK,EAAE,aAAa;UACpBd,WAAW,EAAEoC,eAAe;UAC5BU,WAAW,EAAET,cAAc,CAAC,CAAC,CAAC,CAACC,EAAE;UACjCS,WAAW,EAAE;QACf,CAAC,CAAC;QAEFtC,YAAY,CAACoC,UAAU,CAAC;QACxB;MACF;MAEA,MAAMG,QAAQ,GAAG,MAAM,IAAIC,OAAO,CAA4C,CAACC,OAAO,EAAEC,MAAM,KAAK;QACjGxC,MAAM,CAACC,EAAE,CAACmB,KAAK,CAAEiB,QAAQ,IAAK;UAC5B,IAAIA,QAAQ,CAACI,YAAY,EAAE;YACzBF,OAAO,CAACF,QAAqD,CAAC;UAChE,CAAC,MAAM;YACLG,MAAM,CAAC,IAAIE,KAAK,CAAC,uBAAuB,CAAC,CAAC;UAC5C;QACF,CAAC,EAAE;UACDC,KAAK,EAAE,uDAAuD;UAC9DC,aAAa,EAAE;QACjB,CAAC,CAAC;MACJ,CAAC,CAAC;MAEF,MAAM;QAAEvD;MAAY,CAAC,GAAGgD,QAAQ,CAACI,YAAY;;MAE7C;MACA,MAAMI,MAAM,GAAG,IAAI9D,iBAAiB,CAAC;QACnCoB,KAAK,EAAEC,OAAO,CAACC,GAAG,CAACC,yBAAyB,IAAI,aAAa;QAC7DjB,WAAW;QACX8C,WAAW,EAAE,EAAE;QAAE;QACjBC,WAAW,EAAE,IAAI,CAAE;MACrB,CAAC,CAAC;MAEFtC,YAAY,CAAC+C,MAAM,CAAC;;MAEpB;MACA,MAAM,CAACC,kBAAkB,EAAEC,aAAa,CAAC,GAAG,MAAMT,OAAO,CAACU,GAAG,CAAC,CAC5DH,MAAM,CAACI,aAAa,CAAC,CAAC,EACtBJ,MAAM,CAACK,QAAQ,CAAC,CAAC,CAClB,CAAC;MAEF/D,YAAY,CAACkC,IAAI,KAAK;QACpB,GAAGA,IAAI;QACPjC,eAAe,EAAE,IAAI;QACrBC,WAAW;QACXC,UAAU,EAAEwD,kBAAkB,CAACK,IAAI;QACnC5D,KAAK,EAAEwD,aAAa,CAACI,IAAI;QACzBxD,SAAS,EAAE;MACb,CAAC,CAAC,CAAC;IAEL,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdT,YAAY,CAACkC,IAAI,KAAK;QACpB,GAAGA,IAAI;QACP1B,SAAS,EAAE,KAAK;QAChBC,KAAK,EAAEA,KAAK,YAAY8C,KAAK,GAAG9C,KAAK,CAACwD,OAAO,GAAG;MAClD,CAAC,CAAC,CAAC;IACL;EACF,CAAC;;EAED;EACA,MAAMC,MAAM,GAAGA,CAAA,KAAY;IACzB,IAAIrD,MAAM,CAACC,EAAE,EAAE;MACbD,MAAM,CAACC,EAAE,CAACoD,MAAM,CAAC,MAAM;QACrBlE,YAAY,CAAC;UACXC,eAAe,EAAE,KAAK;UACtBC,WAAW,EAAE,IAAI;UACjBC,UAAU,EAAE,EAAE;UACdC,KAAK,EAAE,EAAE;UACTC,iBAAiB,EAAE,IAAI;UACvBC,YAAY,EAAE,IAAI;UAClBC,eAAe,EAAE,EAAE;UACnBC,SAAS,EAAE,KAAK;UAChBC,KAAK,EAAE;QACT,CAAC,CAAC;QACFE,YAAY,CAAC,IAAI,CAAC;MACpB,CAAC,CAAC;IACJ,CAAC,MAAM;MACL;MACAX,YAAY,CAAC;QACXC,eAAe,EAAE,KAAK;QACtBC,WAAW,EAAE,IAAI;QACjBC,UAAU,EAAE,EAAE;QACdC,KAAK,EAAE,EAAE;QACTC,iBAAiB,EAAE,IAAI;QACvBC,YAAY,EAAE,IAAI;QAClBC,eAAe,EAAE,EAAE;QACnBC,SAAS,EAAE,KAAK;QAChBC,KAAK,EAAE;MACT,CAAC,CAAC;MACFE,YAAY,CAAC,IAAI,CAAC;IACpB;EACF,CAAC;;EAED;EACA,MAAMwD,eAAe,GAAG,MAAOC,SAA4B,IAAoB;IAC7E,IAAI,CAAC1D,SAAS,EAAE;IAEhBV,YAAY,CAACkC,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAE1B,SAAS,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC,CAAC;IAEjE,IAAI;MACF;MACA,MAAM4D,aAAa,GAAG,IAAIzE,iBAAiB,CAAC;QAC1CoB,KAAK,EAAEC,OAAO,CAACC,GAAG,CAACC,yBAAyB,IAAI,aAAa;QAC7DjB,WAAW,EAAEH,SAAS,CAACG,WAAY;QACnC8C,WAAW,EAAEoB,SAAS,CAAC5B,EAAE;QACzBS,WAAW,EAAE;MACf,CAAC,CAAC;MAEFtC,YAAY,CAAC0D,aAAa,CAAC;;MAE3B;MACA,MAAMC,uBAAuB,GAAG,MAAMD,aAAa,CAACE,kBAAkB,CAACH,SAAS,CAAC5B,EAAE,CAAC;MAEpFxC,YAAY,CAACkC,IAAI,KAAK;QACpB,GAAGA,IAAI;QACP7B,iBAAiB,EAAE+D,SAAS;QAC5B7D,eAAe,EAAE+D,uBAAuB,CAACN,IAAI;QAC7CxD,SAAS,EAAE;MACb,CAAC,CAAC,CAAC;IAEL,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdT,YAAY,CAACkC,IAAI,KAAK;QACpB,GAAGA,IAAI;QACP1B,SAAS,EAAE,KAAK;QAChBC,KAAK,EAAEA,KAAK,YAAY8C,KAAK,GAAG9C,KAAK,CAACwD,OAAO,GAAG;MAClD,CAAC,CAAC,CAAC;IACL;EACF,CAAC;;EAED;EACA,MAAMO,UAAU,GAAIC,IAAkB,IAAW;IAC/CzE,YAAY,CAACkC,IAAI,KAAK;MACpB,GAAGA,IAAI;MACP5B,YAAY,EAAEmE;IAChB,CAAC,CAAC,CAAC;EACL,CAAC;EAED,OAAO;IACL,GAAG1E,SAAS;IACZW,SAAS;IACTuB,KAAK;IACLiC,MAAM;IACNC,eAAe;IACfK;EACF,CAAC;AACH,CAAC;AAAC1E,EAAA,CAzNWD,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}