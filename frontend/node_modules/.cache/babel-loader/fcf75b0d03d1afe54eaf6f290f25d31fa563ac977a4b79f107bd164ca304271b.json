{"ast":null,"code":"/**\n * Returns the years to display in the dropdown.\n *\n * This function generates a list of years between the navigation start and end\n * dates, formatted using the provided formatter.\n *\n * @param navStart The start date for navigation.\n * @param navEnd The end date for navigation.\n * @param formatters The formatters to use for formatting the year labels.\n * @param dateLib The date library to use for date manipulation.\n * @returns An array of dropdown options representing the years, or `undefined`\n *   if `navStart` or `navEnd` is not provided.\n */\nexport function getYearOptions(navStart, navEnd, formatters, dateLib) {\n  if (!navStart) return undefined;\n  if (!navEnd) return undefined;\n  const {\n    startOfYear,\n    endOfYear,\n    addYears,\n    getYear,\n    isBefore,\n    isSameYear\n  } = dateLib;\n  const firstNavYear = startOfYear(navStart);\n  const lastNavYear = endOfYear(navEnd);\n  const years = [];\n  let year = firstNavYear;\n  while (isBefore(year, lastNavYear) || isSameYear(year, lastNavYear)) {\n    years.push(year);\n    year = addYears(year, 1);\n  }\n  return years.map(year => {\n    const label = formatters.formatYearDropdown(year, dateLib);\n    return {\n      value: getYear(year),\n      label,\n      disabled: false\n    };\n  });\n}","map":{"version":3,"names":["getYearOptions","navStart","navEnd","formatters","dateLib","undefined","startOfYear","endOfYear","addYears","getYear","isBefore","isSameYear","firstNavYear","lastNavYear","years","year","push","map","label","formatYearDropdown","value","disabled"],"sources":["/Users/paulius/Downloads/Projects/Meta Ads Uploader/frontend/node_modules/react-day-picker/src/helpers/getYearOptions.ts"],"sourcesContent":["import type { DateLib } from \"../classes/DateLib.js\";\nimport { DropdownOption } from \"../components/Dropdown.js\";\nimport type { Formatters } from \"../types/index.js\";\n\n/**\n * Returns the years to display in the dropdown.\n *\n * This function generates a list of years between the navigation start and end\n * dates, formatted using the provided formatter.\n *\n * @param navStart The start date for navigation.\n * @param navEnd The end date for navigation.\n * @param formatters The formatters to use for formatting the year labels.\n * @param dateLib The date library to use for date manipulation.\n * @returns An array of dropdown options representing the years, or `undefined`\n *   if `navStart` or `navEnd` is not provided.\n */\nexport function getYearOptions(\n  navStart: Date | undefined,\n  navEnd: Date | undefined,\n  formatters: Pick<Formatters, \"formatYearDropdown\">,\n  dateLib: DateLib\n): DropdownOption[] | undefined {\n  if (!navStart) return undefined;\n  if (!navEnd) return undefined;\n  const { startOfYear, endOfYear, addYears, getYear, isBefore, isSameYear } =\n    dateLib;\n  const firstNavYear = startOfYear(navStart);\n  const lastNavYear = endOfYear(navEnd);\n  const years: Date[] = [];\n\n  let year = firstNavYear;\n  while (isBefore(year, lastNavYear) || isSameYear(year, lastNavYear)) {\n    years.push(year);\n    year = addYears(year, 1);\n  }\n\n  return years.map((year) => {\n    const label = formatters.formatYearDropdown(year, dateLib);\n    return {\n      value: getYear(year),\n      label,\n      disabled: false\n    };\n  });\n}\n"],"mappings":"AAIA;;;;;;;;;;;;;AAaA,OAAM,SAAUA,cAAcA,CAC5BC,QAA0B,EAC1BC,MAAwB,EACxBC,UAAkD,EAClDC,OAAgB;EAEhB,IAAI,CAACH,QAAQ,EAAE,OAAOI,SAAS;EAC/B,IAAI,CAACH,MAAM,EAAE,OAAOG,SAAS;EAC7B,MAAM;IAAEC,WAAW;IAAEC,SAAS;IAAEC,QAAQ;IAAEC,OAAO;IAAEC,QAAQ;IAAEC;EAAU,CAAE,GACvEP,OAAO;EACT,MAAMQ,YAAY,GAAGN,WAAW,CAACL,QAAQ,CAAC;EAC1C,MAAMY,WAAW,GAAGN,SAAS,CAACL,MAAM,CAAC;EACrC,MAAMY,KAAK,GAAW,EAAE;EAExB,IAAIC,IAAI,GAAGH,YAAY;EACvB,OAAOF,QAAQ,CAACK,IAAI,EAAEF,WAAW,CAAC,IAAIF,UAAU,CAACI,IAAI,EAAEF,WAAW,CAAC,EAAE;IACnEC,KAAK,CAACE,IAAI,CAACD,IAAI,CAAC;IAChBA,IAAI,GAAGP,QAAQ,CAACO,IAAI,EAAE,CAAC,CAAC;EAC1B;EAEA,OAAOD,KAAK,CAACG,GAAG,CAAEF,IAAI,IAAI;IACxB,MAAMG,KAAK,GAAGf,UAAU,CAACgB,kBAAkB,CAACJ,IAAI,EAAEX,OAAO,CAAC;IAC1D,OAAO;MACLgB,KAAK,EAAEX,OAAO,CAACM,IAAI,CAAC;MACpBG,KAAK;MACLG,QAAQ,EAAE;KACX;EACH,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}