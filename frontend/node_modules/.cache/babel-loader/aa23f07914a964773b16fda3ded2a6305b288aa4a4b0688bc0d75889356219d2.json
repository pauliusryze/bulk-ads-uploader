{"ast":null,"code":"import { tzOffset } from \"../tzOffset/index.js\";\n\n/**\n * Time interval.\n */\n\n/**\n * Time zone change record.\n */\n\n/**\n * The function scans the time zone for changes in the given interval.\n *\n * @param timeZone - Time zone name (IANA or UTC offset)\n * @param interval - Time interval to scan for changes\n *\n * @returns Array of time zone changes\n */\nexport function tzScan(timeZone, interval) {\n  const changes = [];\n  const monthDate = new Date(interval.start);\n  monthDate.setUTCSeconds(0, 0);\n  const endDate = new Date(interval.end);\n  endDate.setUTCSeconds(0, 0);\n  const endMonthTime = +endDate;\n  let lastOffset = tzOffset(timeZone, monthDate);\n  while (+monthDate < endMonthTime) {\n    // Month forward\n    monthDate.setUTCMonth(monthDate.getUTCMonth() + 1);\n\n    // Find the month where the offset changes\n    const offset = tzOffset(timeZone, monthDate);\n    if (offset != lastOffset) {\n      // Rewind a month back to find the day where the offset changes\n      const dayDate = new Date(monthDate);\n      dayDate.setUTCMonth(dayDate.getUTCMonth() - 1);\n      const endDayTime = +monthDate;\n      lastOffset = tzOffset(timeZone, dayDate);\n      while (+dayDate < endDayTime) {\n        // Day forward\n        dayDate.setUTCDate(dayDate.getUTCDate() + 1);\n\n        // Find the day where the offset changes\n        const offset = tzOffset(timeZone, dayDate);\n        if (offset != lastOffset) {\n          // Rewind a day back to find the time where the offset changes\n          const hourDate = new Date(dayDate);\n          hourDate.setUTCDate(hourDate.getUTCDate() - 1);\n          const endHourTime = +dayDate;\n          lastOffset = tzOffset(timeZone, hourDate);\n          while (+hourDate < endHourTime) {\n            // Hour forward\n            hourDate.setUTCHours(hourDate.getUTCHours() + 1);\n\n            // Find the hour where the offset changes\n            const hourOffset = tzOffset(timeZone, hourDate);\n            if (hourOffset !== lastOffset) {\n              changes.push({\n                date: new Date(hourDate),\n                change: hourOffset - lastOffset,\n                offset: hourOffset\n              });\n            }\n            lastOffset = hourOffset;\n          }\n        }\n        lastOffset = offset;\n      }\n    }\n    lastOffset = offset;\n  }\n  return changes;\n}","map":{"version":3,"names":["tzOffset","tzScan","timeZone","interval","changes","monthDate","Date","start","setUTCSeconds","endDate","end","endMonthTime","lastOffset","setUTCMonth","getUTCMonth","offset","dayDate","endDayTime","setUTCDate","getUTCDate","hourDate","endHourTime","setUTCHours","getUTCHours","hourOffset","push","date","change"],"sources":["/Users/paulius/Downloads/Projects/Meta Ads Uploader/frontend/node_modules/@date-fns/tz/tzScan/index.js"],"sourcesContent":["import { tzOffset } from \"../tzOffset/index.js\";\n\n/**\n * Time interval.\n */\n\n/**\n * Time zone change record.\n */\n\n/**\n * The function scans the time zone for changes in the given interval.\n *\n * @param timeZone - Time zone name (IANA or UTC offset)\n * @param interval - Time interval to scan for changes\n *\n * @returns Array of time zone changes\n */\nexport function tzScan(timeZone, interval) {\n  const changes = [];\n  const monthDate = new Date(interval.start);\n  monthDate.setUTCSeconds(0, 0);\n  const endDate = new Date(interval.end);\n  endDate.setUTCSeconds(0, 0);\n  const endMonthTime = +endDate;\n  let lastOffset = tzOffset(timeZone, monthDate);\n  while (+monthDate < endMonthTime) {\n    // Month forward\n    monthDate.setUTCMonth(monthDate.getUTCMonth() + 1);\n\n    // Find the month where the offset changes\n    const offset = tzOffset(timeZone, monthDate);\n    if (offset != lastOffset) {\n      // Rewind a month back to find the day where the offset changes\n      const dayDate = new Date(monthDate);\n      dayDate.setUTCMonth(dayDate.getUTCMonth() - 1);\n      const endDayTime = +monthDate;\n      lastOffset = tzOffset(timeZone, dayDate);\n      while (+dayDate < endDayTime) {\n        // Day forward\n        dayDate.setUTCDate(dayDate.getUTCDate() + 1);\n\n        // Find the day where the offset changes\n        const offset = tzOffset(timeZone, dayDate);\n        if (offset != lastOffset) {\n          // Rewind a day back to find the time where the offset changes\n          const hourDate = new Date(dayDate);\n          hourDate.setUTCDate(hourDate.getUTCDate() - 1);\n          const endHourTime = +dayDate;\n          lastOffset = tzOffset(timeZone, hourDate);\n          while (+hourDate < endHourTime) {\n            // Hour forward\n            hourDate.setUTCHours(hourDate.getUTCHours() + 1);\n\n            // Find the hour where the offset changes\n            const hourOffset = tzOffset(timeZone, hourDate);\n            if (hourOffset !== lastOffset) {\n              changes.push({\n                date: new Date(hourDate),\n                change: hourOffset - lastOffset,\n                offset: hourOffset\n              });\n            }\n            lastOffset = hourOffset;\n          }\n        }\n        lastOffset = offset;\n      }\n    }\n    lastOffset = offset;\n  }\n  return changes;\n}"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,sBAAsB;;AAE/C;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,MAAMA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;EACzC,MAAMC,OAAO,GAAG,EAAE;EAClB,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAACH,QAAQ,CAACI,KAAK,CAAC;EAC1CF,SAAS,CAACG,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC;EAC7B,MAAMC,OAAO,GAAG,IAAIH,IAAI,CAACH,QAAQ,CAACO,GAAG,CAAC;EACtCD,OAAO,CAACD,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC;EAC3B,MAAMG,YAAY,GAAG,CAACF,OAAO;EAC7B,IAAIG,UAAU,GAAGZ,QAAQ,CAACE,QAAQ,EAAEG,SAAS,CAAC;EAC9C,OAAO,CAACA,SAAS,GAAGM,YAAY,EAAE;IAChC;IACAN,SAAS,CAACQ,WAAW,CAACR,SAAS,CAACS,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC;;IAElD;IACA,MAAMC,MAAM,GAAGf,QAAQ,CAACE,QAAQ,EAAEG,SAAS,CAAC;IAC5C,IAAIU,MAAM,IAAIH,UAAU,EAAE;MACxB;MACA,MAAMI,OAAO,GAAG,IAAIV,IAAI,CAACD,SAAS,CAAC;MACnCW,OAAO,CAACH,WAAW,CAACG,OAAO,CAACF,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC;MAC9C,MAAMG,UAAU,GAAG,CAACZ,SAAS;MAC7BO,UAAU,GAAGZ,QAAQ,CAACE,QAAQ,EAAEc,OAAO,CAAC;MACxC,OAAO,CAACA,OAAO,GAAGC,UAAU,EAAE;QAC5B;QACAD,OAAO,CAACE,UAAU,CAACF,OAAO,CAACG,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC;;QAE5C;QACA,MAAMJ,MAAM,GAAGf,QAAQ,CAACE,QAAQ,EAAEc,OAAO,CAAC;QAC1C,IAAID,MAAM,IAAIH,UAAU,EAAE;UACxB;UACA,MAAMQ,QAAQ,GAAG,IAAId,IAAI,CAACU,OAAO,CAAC;UAClCI,QAAQ,CAACF,UAAU,CAACE,QAAQ,CAACD,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC;UAC9C,MAAME,WAAW,GAAG,CAACL,OAAO;UAC5BJ,UAAU,GAAGZ,QAAQ,CAACE,QAAQ,EAAEkB,QAAQ,CAAC;UACzC,OAAO,CAACA,QAAQ,GAAGC,WAAW,EAAE;YAC9B;YACAD,QAAQ,CAACE,WAAW,CAACF,QAAQ,CAACG,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC;;YAEhD;YACA,MAAMC,UAAU,GAAGxB,QAAQ,CAACE,QAAQ,EAAEkB,QAAQ,CAAC;YAC/C,IAAII,UAAU,KAAKZ,UAAU,EAAE;cAC7BR,OAAO,CAACqB,IAAI,CAAC;gBACXC,IAAI,EAAE,IAAIpB,IAAI,CAACc,QAAQ,CAAC;gBACxBO,MAAM,EAAEH,UAAU,GAAGZ,UAAU;gBAC/BG,MAAM,EAAES;cACV,CAAC,CAAC;YACJ;YACAZ,UAAU,GAAGY,UAAU;UACzB;QACF;QACAZ,UAAU,GAAGG,MAAM;MACrB;IACF;IACAH,UAAU,GAAGG,MAAM;EACrB;EACA,OAAOX,OAAO;AAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}