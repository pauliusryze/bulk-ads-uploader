{"ast":null,"code":"export class FacebookAdService {\n  constructor(apiClient) {\n    this.apiClient = void 0;\n    this.apiClient = apiClient;\n  }\n\n  // Map template to Facebook campaign data\n  mapTemplateToCampaign(template) {\n    return {\n      name: template.name,\n      objective: 'LINK_CLICKS',\n      // Default objective, can be made configurable\n      status: 'PAUSED' // Always create in paused status for safety\n    };\n  }\n\n  // Map template to Facebook ad set data\n  mapTemplateToAdSet(template, campaignId, adSetName, budget) {\n    return {\n      name: adSetName,\n      campaign_id: campaignId,\n      daily_budget: budget * 100,\n      // Convert to cents\n      billing_event: 'IMPRESSIONS',\n      optimization_goal: 'LINK_CLICKS',\n      targeting: {\n        age_min: template.targeting.ageMin,\n        age_max: template.targeting.ageMax,\n        geo_locations: {\n          countries: template.targeting.locations.inclusion || []\n        }\n      },\n      status: 'PAUSED' // Always create in paused status for safety\n    };\n  }\n\n  // Map template and ad item to Facebook creative data\n  mapTemplateToCreative(template, adItem, pageId) {\n    const linkData = {\n      message: template.adCopy.primaryText,\n      link: 'https://your-website.com',\n      // This should be configurable\n      call_to_action: {\n        type: template.adCopy.callToAction || 'LEARN_MORE',\n        value: {\n          link: 'https://your-website.com'\n        }\n      }\n    };\n    return {\n      name: `${adItem.adName} Creative`,\n      object_story_spec: {\n        page_id: pageId,\n        link_data: linkData\n      }\n    };\n  }\n\n  // Map ad item to Facebook ad data\n  mapAdItemToAd(adItem, adSetId, creativeId) {\n    return {\n      name: adItem.adName,\n      adset_id: adSetId,\n      creative: {\n        creative_id: creativeId\n      },\n      status: 'PAUSED' // Always create in paused status for safety\n    };\n  }\n\n  // Upload media to Facebook\n  async uploadMediaToFacebook(adAccountId, file) {\n    const result = await this.apiClient.uploadMedia(adAccountId, file);\n    return result.hash; // Return the media hash for use in creatives\n  }\n\n  // Generate ad preview\n  async generateAdPreview(adAccountId, creativeSpec, adFormat = 'DESKTOP_FEED_STANDARD') {\n    const result = await this.apiClient.generateAdPreview(adAccountId, creativeSpec, adFormat);\n    return result.body; // Return the preview HTML\n  }\n\n  // Create bulk ads with preview\n  async createBulkAdsWithPreview(template, adItems, adAccountId, pageId, budget) {\n    const result = {\n      campaignId: '',\n      adSetIds: [],\n      creativeIds: [],\n      adIds: [],\n      errors: [],\n      previewUrls: []\n    };\n    try {\n      // 1. Create campaign\n      const campaignData = this.mapTemplateToCampaign(template);\n      const campaignResult = await this.apiClient.createCampaign(adAccountId, campaignData);\n      result.campaignId = campaignResult.id;\n\n      // 2. Create ad sets for each ad item\n      for (let i = 0; i < adItems.length; i++) {\n        const adItem = adItems[i];\n        try {\n          // Create ad set\n          const adSetData = this.mapTemplateToAdSet(template, result.campaignId, adItem.adSetName, budget);\n          const adSetResult = await this.apiClient.createAdSet(adAccountId, adSetData);\n          result.adSetIds.push(adSetResult.id);\n\n          // Create creative\n          const creativeData = this.mapTemplateToCreative(template, adItem, pageId);\n          const creativeResult = await this.apiClient.createAdCreative(adAccountId, creativeData);\n          result.creativeIds.push(creativeResult.id);\n\n          // Create ad\n          const adData = this.mapAdItemToAd(adItem, adSetResult.id, creativeResult.id);\n          const adResult = await this.apiClient.createAd(adAccountId, adData);\n          result.adIds.push(adResult.id);\n\n          // Generate preview\n          const previewUrl = await this.generateAdPreview(adAccountId, creativeData, 'DESKTOP_FEED_STANDARD');\n          result.previewUrls.push(previewUrl);\n        } catch (error) {\n          result.errors.push(`Failed to create ad ${i + 1}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n      }\n    } catch (error) {\n      result.errors.push(`Failed to create campaign: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n    return result;\n  }\n\n  // Get ad previews for existing ads\n  async getAdPreviews(adIds) {\n    const previews = [];\n    for (const adId of adIds) {\n      try {\n        const result = await this.apiClient.getAdPreview(adId);\n        if (result.data && result.data.length > 0) {\n          previews.push({\n            adId,\n            previewUrl: result.data[0].body,\n            adFormat: 'DESKTOP_FEED_STANDARD'\n          });\n        }\n      } catch (error) {\n        console.error(`Failed to get preview for ad ${adId}:`, error);\n      }\n    }\n    return previews;\n  }\n\n  // Activate ads (change status from PAUSED to ACTIVE)\n  async activateAds(adIds) {\n    for (const adId of adIds) {\n      try {\n        await this.apiClient.updateAdStatus(adId, 'ACTIVE');\n      } catch (error) {\n        console.error(`Failed to activate ad ${adId}:`, error);\n      }\n    }\n  }\n\n  // Delete ads (for cleanup)\n  async deleteAds(adIds) {\n    for (const adId of adIds) {\n      try {\n        await this.apiClient.deleteAd(adId);\n      } catch (error) {\n        console.error(`Failed to delete ad ${adId}:`, error);\n      }\n    }\n  }\n}","map":{"version":3,"names":["FacebookAdService","constructor","apiClient","mapTemplateToCampaign","template","name","objective","status","mapTemplateToAdSet","campaignId","adSetName","budget","campaign_id","daily_budget","billing_event","optimization_goal","targeting","age_min","ageMin","age_max","ageMax","geo_locations","countries","locations","inclusion","mapTemplateToCreative","adItem","pageId","linkData","message","adCopy","primaryText","link","call_to_action","type","callToAction","value","adName","object_story_spec","page_id","link_data","mapAdItemToAd","adSetId","creativeId","adset_id","creative","creative_id","uploadMediaToFacebook","adAccountId","file","result","uploadMedia","hash","generateAdPreview","creativeSpec","adFormat","body","createBulkAdsWithPreview","adItems","adSetIds","creativeIds","adIds","errors","previewUrls","campaignData","campaignResult","createCampaign","id","i","length","adSetData","adSetResult","createAdSet","push","creativeData","creativeResult","createAdCreative","adData","adResult","createAd","previewUrl","error","Error","getAdPreviews","previews","adId","getAdPreview","data","console","activateAds","updateAdStatus","deleteAds","deleteAd"],"sources":["/Users/paulius/Downloads/Projects/Meta Ads Uploader/frontend/src/services/facebook-ad-service.ts"],"sourcesContent":["import FacebookAPIClient, {\n  FacebookCampaignData,\n  FacebookAdSetData,\n  FacebookCreativeData,\n  FacebookAdData,\n} from '../lib/facebook-api';\nimport { EnhancedAdTemplate, BulkAdItem } from '../types';\n\nexport interface BulkAdCreationResult {\n  campaignId: string;\n  adSetIds: string[];\n  creativeIds: string[];\n  adIds: string[];\n  errors: string[];\n  previewUrls: string[];\n}\n\nexport interface AdPreviewData {\n  adId: string;\n  previewUrl: string;\n  adFormat: string;\n}\n\nexport class FacebookAdService {\n  private apiClient: FacebookAPIClient;\n\n  constructor(apiClient: FacebookAPIClient) {\n    this.apiClient = apiClient;\n  }\n\n  // Map template to Facebook campaign data\n  private mapTemplateToCampaign(template: EnhancedAdTemplate): FacebookCampaignData {\n    return {\n      name: template.name,\n      objective: 'LINK_CLICKS', // Default objective, can be made configurable\n      status: 'PAUSED', // Always create in paused status for safety\n    };\n  }\n\n  // Map template to Facebook ad set data\n  private mapTemplateToAdSet(\n    template: EnhancedAdTemplate,\n    campaignId: string,\n    adSetName: string,\n    budget: number\n  ): FacebookAdSetData {\n    return {\n      name: adSetName,\n      campaign_id: campaignId,\n      daily_budget: budget * 100, // Convert to cents\n      billing_event: 'IMPRESSIONS',\n      optimization_goal: 'LINK_CLICKS',\n      targeting: {\n        age_min: template.targeting.ageMin,\n        age_max: template.targeting.ageMax,\n        geo_locations: {\n          countries: template.targeting.locations.inclusion || [],\n        },\n      },\n      status: 'PAUSED', // Always create in paused status for safety\n    };\n  }\n\n  // Map template and ad item to Facebook creative data\n  private mapTemplateToCreative(\n    template: EnhancedAdTemplate,\n    adItem: BulkAdItem,\n    pageId: string\n  ): FacebookCreativeData {\n    const linkData = {\n      message: template.adCopy.primaryText,\n      link: 'https://your-website.com', // This should be configurable\n      call_to_action: {\n        type: template.adCopy.callToAction || 'LEARN_MORE',\n        value: {\n          link: 'https://your-website.com',\n        },\n      },\n    };\n\n    return {\n      name: `${adItem.adName} Creative`,\n      object_story_spec: {\n        page_id: pageId,\n        link_data: linkData,\n      },\n    };\n  }\n\n  // Map ad item to Facebook ad data\n  private mapAdItemToAd(\n    adItem: BulkAdItem,\n    adSetId: string,\n    creativeId: string\n  ): FacebookAdData {\n    return {\n      name: adItem.adName,\n      adset_id: adSetId,\n      creative: {\n        creative_id: creativeId,\n      },\n      status: 'PAUSED', // Always create in paused status for safety\n    };\n  }\n\n  // Upload media to Facebook\n  async uploadMediaToFacebook(adAccountId: string, file: File): Promise<string> {\n    const result = await this.apiClient.uploadMedia(adAccountId, file);\n    return result.hash; // Return the media hash for use in creatives\n  }\n\n  // Generate ad preview\n  async generateAdPreview(\n    adAccountId: string,\n    creativeSpec: any,\n    adFormat: string = 'DESKTOP_FEED_STANDARD'\n  ): Promise<string> {\n    const result = await this.apiClient.generateAdPreview(adAccountId, creativeSpec, adFormat);\n    return result.body; // Return the preview HTML\n  }\n\n  // Create bulk ads with preview\n  async createBulkAdsWithPreview(\n    template: EnhancedAdTemplate,\n    adItems: BulkAdItem[],\n    adAccountId: string,\n    pageId: string,\n    budget: number\n  ): Promise<BulkAdCreationResult> {\n    const result: BulkAdCreationResult = {\n      campaignId: '',\n      adSetIds: [],\n      creativeIds: [],\n      adIds: [],\n      errors: [],\n      previewUrls: [],\n    };\n\n    try {\n      // 1. Create campaign\n      const campaignData = this.mapTemplateToCampaign(template);\n      const campaignResult = await this.apiClient.createCampaign(adAccountId, campaignData);\n      result.campaignId = campaignResult.id;\n\n      // 2. Create ad sets for each ad item\n      for (let i = 0; i < adItems.length; i++) {\n        const adItem = adItems[i];\n        \n        try {\n          // Create ad set\n          const adSetData = this.mapTemplateToAdSet(\n            template,\n            result.campaignId,\n            adItem.adSetName,\n            budget\n          );\n          const adSetResult = await this.apiClient.createAdSet(adAccountId, adSetData);\n          result.adSetIds.push(adSetResult.id);\n\n          // Create creative\n          const creativeData = this.mapTemplateToCreative(template, adItem, pageId);\n          const creativeResult = await this.apiClient.createAdCreative(adAccountId, creativeData);\n          result.creativeIds.push(creativeResult.id);\n\n          // Create ad\n          const adData = this.mapAdItemToAd(adItem, adSetResult.id, creativeResult.id);\n          const adResult = await this.apiClient.createAd(adAccountId, adData);\n          result.adIds.push(adResult.id);\n\n          // Generate preview\n          const previewUrl = await this.generateAdPreview(adAccountId, creativeData, 'DESKTOP_FEED_STANDARD');\n          result.previewUrls.push(previewUrl);\n\n        } catch (error) {\n          result.errors.push(`Failed to create ad ${i + 1}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n      }\n\n    } catch (error) {\n      result.errors.push(`Failed to create campaign: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n\n    return result;\n  }\n\n  // Get ad previews for existing ads\n  async getAdPreviews(adIds: string[]): Promise<AdPreviewData[]> {\n    const previews: AdPreviewData[] = [];\n\n    for (const adId of adIds) {\n      try {\n        const result = await this.apiClient.getAdPreview(adId);\n        if (result.data && result.data.length > 0) {\n          previews.push({\n            adId,\n            previewUrl: result.data[0].body,\n            adFormat: 'DESKTOP_FEED_STANDARD',\n          });\n        }\n      } catch (error) {\n        console.error(`Failed to get preview for ad ${adId}:`, error);\n      }\n    }\n\n    return previews;\n  }\n\n  // Activate ads (change status from PAUSED to ACTIVE)\n  async activateAds(adIds: string[]): Promise<void> {\n    for (const adId of adIds) {\n      try {\n        await this.apiClient.updateAdStatus(adId, 'ACTIVE');\n      } catch (error) {\n        console.error(`Failed to activate ad ${adId}:`, error);\n      }\n    }\n  }\n\n  // Delete ads (for cleanup)\n  async deleteAds(adIds: string[]): Promise<void> {\n    for (const adId of adIds) {\n      try {\n        await this.apiClient.deleteAd(adId);\n      } catch (error) {\n        console.error(`Failed to delete ad ${adId}:`, error);\n      }\n    }\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}