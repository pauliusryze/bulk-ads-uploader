{"ast":null,"code":"import { defaultDateLib } from \"./DateLib.js\";\n/**\n * Represents a day displayed in the calendar.\n *\n * In DayPicker, a `CalendarDay` is a wrapper around a `Date` object that\n * provides additional information about the day, such as whether it belongs to\n * the displayed month.\n */\nexport class CalendarDay {\n  constructor(date, displayMonth) {\n    let dateLib = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultDateLib;\n    this.date = date;\n    this.displayMonth = displayMonth;\n    this.outside = Boolean(displayMonth && !dateLib.isSameMonth(date, displayMonth));\n    this.dateLib = dateLib;\n  }\n  /**\n   * Checks if this day is equal to another `CalendarDay`, considering both the\n   * date and the displayed month.\n   *\n   * @param day The `CalendarDay` to compare with.\n   * @returns `true` if the days are equal, otherwise `false`.\n   */\n  isEqualTo(day) {\n    return this.dateLib.isSameDay(day.date, this.date) && this.dateLib.isSameMonth(day.displayMonth, this.displayMonth);\n  }\n}","map":{"version":3,"names":["defaultDateLib","CalendarDay","constructor","date","displayMonth","dateLib","arguments","length","undefined","outside","Boolean","isSameMonth","isEqualTo","day","isSameDay"],"sources":["/Users/paulius/Downloads/Projects/Meta Ads Uploader/frontend/node_modules/react-day-picker/src/classes/CalendarDay.ts"],"sourcesContent":["import { type DateLib, defaultDateLib } from \"./DateLib.js\";\n\n/**\n * Represents a day displayed in the calendar.\n *\n * In DayPicker, a `CalendarDay` is a wrapper around a `Date` object that\n * provides additional information about the day, such as whether it belongs to\n * the displayed month.\n */\nexport class CalendarDay {\n  constructor(\n    date: Date,\n    displayMonth: Date,\n    dateLib: DateLib = defaultDateLib\n  ) {\n    this.date = date;\n    this.displayMonth = displayMonth;\n    this.outside = Boolean(\n      displayMonth && !dateLib.isSameMonth(date, displayMonth)\n    );\n    this.dateLib = dateLib;\n  }\n\n  /**\n   * Utility functions for manipulating dates.\n   *\n   * @private\n   */\n  readonly dateLib: DateLib;\n\n  /**\n   * Indicates whether the day does not belong to the displayed month.\n   *\n   * If `outside` is `true`, use `displayMonth` to determine the month to which\n   * the day belongs.\n   */\n  readonly outside: boolean;\n\n  /**\n   * The month that is currently displayed in the calendar.\n   *\n   * This property is useful for determining if the day belongs to the same\n   * month as the displayed month, especially when `showOutsideDays` is\n   * enabled.\n   */\n  readonly displayMonth: Date;\n\n  /** The date represented by this day. */\n  readonly date: Date;\n\n  /**\n   * Checks if this day is equal to another `CalendarDay`, considering both the\n   * date and the displayed month.\n   *\n   * @param day The `CalendarDay` to compare with.\n   * @returns `true` if the days are equal, otherwise `false`.\n   */\n  isEqualTo(day: CalendarDay) {\n    return (\n      this.dateLib.isSameDay(day.date, this.date) &&\n      this.dateLib.isSameMonth(day.displayMonth, this.displayMonth)\n    );\n  }\n}\n"],"mappings":"AAAA,SAAuBA,cAAc,QAAQ,cAAc;AAE3D;;;;;;;AAOA,OAAM,MAAOC,WAAW;EACtBC,YACEC,IAAU,EACVC,YAAkB,EACe;IAAA,IAAjCC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAmBN,cAAc;IAEjC,IAAI,CAACG,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACK,OAAO,GAAGC,OAAO,CACpBN,YAAY,IAAI,CAACC,OAAO,CAACM,WAAW,CAACR,IAAI,EAAEC,YAAY,CAAC,CACzD;IACD,IAAI,CAACC,OAAO,GAAGA,OAAO;EACxB;EA6BA;;;;;;;EAOAO,SAASA,CAACC,GAAgB;IACxB,OACE,IAAI,CAACR,OAAO,CAACS,SAAS,CAACD,GAAG,CAACV,IAAI,EAAE,IAAI,CAACA,IAAI,CAAC,IAC3C,IAAI,CAACE,OAAO,CAACM,WAAW,CAACE,GAAG,CAACT,YAAY,EAAE,IAAI,CAACA,YAAY,CAAC;EAEjE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}