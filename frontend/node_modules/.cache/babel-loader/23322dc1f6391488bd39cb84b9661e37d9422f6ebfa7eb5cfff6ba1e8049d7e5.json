{"ast":null,"code":"import { createClient } from '@supabase/supabase-js';\n\n// Initialize Supabase client\nconst supabase = createClient(process.env.REACT_APP_SUPABASE_URL, process.env.REACT_APP_SUPABASE_ANON_KEY);\nexport async function testSupabaseConnection() {\n  try {\n    var _process$env$REACT_AP;\n    console.log('🔍 Testing Supabase connection...');\n    console.log('URL:', process.env.REACT_APP_SUPABASE_URL);\n    console.log('Anon Key:', ((_process$env$REACT_AP = process.env.REACT_APP_SUPABASE_ANON_KEY) === null || _process$env$REACT_AP === void 0 ? void 0 : _process$env$REACT_AP.substring(0, 20)) + '...');\n\n    // Test basic connection\n    const {\n      data,\n      error\n    } = await supabase.from('users').select('count').limit(1);\n    if (error) {\n      console.error('❌ Supabase connection failed:', error);\n      return {\n        success: false,\n        error: error.message,\n        details: error\n      };\n    }\n    console.log('✅ Supabase connection successful!');\n    console.log('Response:', data);\n    return {\n      success: true,\n      data: data,\n      message: 'Supabase connection verified successfully'\n    };\n  } catch (error) {\n    console.error('❌ Supabase connection error:', error);\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error',\n      details: error\n    };\n  }\n}\n\n// Test real-time subscription\nexport function testRealTimeSubscription() {\n  console.log('🔍 Testing real-time subscription...');\n  const subscription = supabase.channel('test-channel').on('postgres_changes', {\n    event: '*',\n    schema: 'public',\n    table: 'jobs'\n  }, payload => {\n    console.log('✅ Real-time update received:', payload);\n  }).subscribe();\n\n  // Cleanup after 5 seconds\n  setTimeout(() => {\n    subscription.unsubscribe();\n    console.log('✅ Real-time subscription test completed');\n  }, 5000);\n  return subscription;\n}","map":{"version":3,"names":["createClient","supabase","process","env","REACT_APP_SUPABASE_URL","REACT_APP_SUPABASE_ANON_KEY","testSupabaseConnection","_process$env$REACT_AP","console","log","substring","data","error","from","select","limit","success","message","details","Error","testRealTimeSubscription","subscription","channel","on","event","schema","table","payload","subscribe","setTimeout","unsubscribe"],"sources":["/Users/paulius/Downloads/Projects/Meta Ads Uploader/frontend/src/utils/supabase-test.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\n\n// Initialize Supabase client\nconst supabase = createClient(\n  process.env.REACT_APP_SUPABASE_URL!,\n  process.env.REACT_APP_SUPABASE_ANON_KEY!\n);\n\nexport async function testSupabaseConnection() {\n  try {\n    console.log('🔍 Testing Supabase connection...');\n    console.log('URL:', process.env.REACT_APP_SUPABASE_URL);\n    console.log('Anon Key:', process.env.REACT_APP_SUPABASE_ANON_KEY?.substring(0, 20) + '...');\n\n    // Test basic connection\n    const { data, error } = await supabase\n      .from('users')\n      .select('count')\n      .limit(1);\n\n    if (error) {\n      console.error('❌ Supabase connection failed:', error);\n      return {\n        success: false,\n        error: error.message,\n        details: error\n      };\n    }\n\n    console.log('✅ Supabase connection successful!');\n    console.log('Response:', data);\n    \n    return {\n      success: true,\n      data: data,\n      message: 'Supabase connection verified successfully'\n    };\n\n  } catch (error) {\n    console.error('❌ Supabase connection error:', error);\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error',\n      details: error\n    };\n  }\n}\n\n// Test real-time subscription\nexport function testRealTimeSubscription() {\n  console.log('🔍 Testing real-time subscription...');\n  \n  const subscription = supabase\n    .channel('test-channel')\n    .on('postgres_changes', {\n      event: '*',\n      schema: 'public',\n      table: 'jobs'\n    }, (payload) => {\n      console.log('✅ Real-time update received:', payload);\n    })\n    .subscribe();\n\n  // Cleanup after 5 seconds\n  setTimeout(() => {\n    subscription.unsubscribe();\n    console.log('✅ Real-time subscription test completed');\n  }, 5000);\n\n  return subscription;\n} "],"mappings":"AAAA,SAASA,YAAY,QAAQ,uBAAuB;;AAEpD;AACA,MAAMC,QAAQ,GAAGD,YAAY,CAC3BE,OAAO,CAACC,GAAG,CAACC,sBAAsB,EAClCF,OAAO,CAACC,GAAG,CAACE,2BACd,CAAC;AAED,OAAO,eAAeC,sBAAsBA,CAAA,EAAG;EAC7C,IAAI;IAAA,IAAAC,qBAAA;IACFC,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;IAChDD,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEP,OAAO,CAACC,GAAG,CAACC,sBAAsB,CAAC;IACvDI,OAAO,CAACC,GAAG,CAAC,WAAW,EAAE,EAAAF,qBAAA,GAAAL,OAAO,CAACC,GAAG,CAACE,2BAA2B,cAAAE,qBAAA,uBAAvCA,qBAAA,CAAyCG,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,IAAG,KAAK,CAAC;;IAE3F;IACA,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMX,QAAQ,CACnCY,IAAI,CAAC,OAAO,CAAC,CACbC,MAAM,CAAC,OAAO,CAAC,CACfC,KAAK,CAAC,CAAC,CAAC;IAEX,IAAIH,KAAK,EAAE;MACTJ,OAAO,CAACI,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD,OAAO;QACLI,OAAO,EAAE,KAAK;QACdJ,KAAK,EAAEA,KAAK,CAACK,OAAO;QACpBC,OAAO,EAAEN;MACX,CAAC;IACH;IAEAJ,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;IAChDD,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEE,IAAI,CAAC;IAE9B,OAAO;MACLK,OAAO,EAAE,IAAI;MACbL,IAAI,EAAEA,IAAI;MACVM,OAAO,EAAE;IACX,CAAC;EAEH,CAAC,CAAC,OAAOL,KAAK,EAAE;IACdJ,OAAO,CAACI,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,OAAO;MACLI,OAAO,EAAE,KAAK;MACdJ,KAAK,EAAEA,KAAK,YAAYO,KAAK,GAAGP,KAAK,CAACK,OAAO,GAAG,eAAe;MAC/DC,OAAO,EAAEN;IACX,CAAC;EACH;AACF;;AAEA;AACA,OAAO,SAASQ,wBAAwBA,CAAA,EAAG;EACzCZ,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;EAEnD,MAAMY,YAAY,GAAGpB,QAAQ,CAC1BqB,OAAO,CAAC,cAAc,CAAC,CACvBC,EAAE,CAAC,kBAAkB,EAAE;IACtBC,KAAK,EAAE,GAAG;IACVC,MAAM,EAAE,QAAQ;IAChBC,KAAK,EAAE;EACT,CAAC,EAAGC,OAAO,IAAK;IACdnB,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEkB,OAAO,CAAC;EACtD,CAAC,CAAC,CACDC,SAAS,CAAC,CAAC;;EAEd;EACAC,UAAU,CAAC,MAAM;IACfR,YAAY,CAACS,WAAW,CAAC,CAAC;IAC1BtB,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;EACxD,CAAC,EAAE,IAAI,CAAC;EAER,OAAOY,YAAY;AACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}