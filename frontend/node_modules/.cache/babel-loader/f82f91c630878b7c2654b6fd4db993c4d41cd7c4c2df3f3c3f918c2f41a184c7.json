{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { createClient } from '@supabase/supabase-js';\n\n// Initialize Supabase client\nconst supabase = createClient(process.env.REACT_APP_SUPABASE_URL, process.env.REACT_APP_SUPABASE_ANON_KEY);\nexport function useRealTimeSubscription({\n  currentJobId,\n  onProgressUpdate,\n  onJobComplete,\n  onJobFailed\n}) {\n  _s();\n  useEffect(() => {\n    if (!currentJobId) return;\n    const subscription = supabase.channel('job-progress').on('postgres_changes', {\n      event: 'UPDATE',\n      schema: 'public',\n      table: 'jobs',\n      filter: `job_id=eq.${currentJobId}`\n    }, payload => {\n      console.log('Job progress updated:', payload.new);\n\n      // Update progress state\n      if (payload.new) {\n        const jobData = payload.new;\n        const progress = jobData.progress || 0;\n        const message = `Completed: ${jobData.completed_items}/${jobData.total_items} ads`;\n        onProgressUpdate(progress, message);\n\n        // Handle job completion\n        if (jobData.status === 'completed') {\n          onJobComplete(jobData.result);\n        } else if (jobData.status === 'failed') {\n          onJobFailed(jobData.error_message || \"An error occurred\");\n        }\n      }\n    }).subscribe();\n\n    // Cleanup subscription\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [currentJobId, onProgressUpdate, onJobComplete, onJobFailed]);\n}\n_s(useRealTimeSubscription, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");","map":{"version":3,"names":["useEffect","createClient","supabase","process","env","REACT_APP_SUPABASE_URL","REACT_APP_SUPABASE_ANON_KEY","useRealTimeSubscription","currentJobId","onProgressUpdate","onJobComplete","onJobFailed","_s","subscription","channel","on","event","schema","table","filter","payload","console","log","new","jobData","progress","message","completed_items","total_items","status","result","error_message","subscribe","unsubscribe"],"sources":["/Users/paulius/Downloads/Projects/Meta Ads Uploader/frontend/src/components/RealTimeSubscription.tsx"],"sourcesContent":["import { useEffect } from 'react';\nimport { createClient } from '@supabase/supabase-js';\n\n// Initialize Supabase client\nconst supabase = createClient(\n  process.env.REACT_APP_SUPABASE_URL!,\n  process.env.REACT_APP_SUPABASE_ANON_KEY!\n);\n\ninterface RealTimeSubscriptionProps {\n  currentJobId: string | null;\n  onProgressUpdate: (progress: number, message: string) => void;\n  onJobComplete: (result: any) => void;\n  onJobFailed: (error: string) => void;\n}\n\nexport function useRealTimeSubscription({\n  currentJobId,\n  onProgressUpdate,\n  onJobComplete,\n  onJobFailed\n}: RealTimeSubscriptionProps) {\n  useEffect(() => {\n    if (!currentJobId) return;\n\n    const subscription = supabase\n      .channel('job-progress')\n      .on('postgres_changes', {\n        event: 'UPDATE',\n        schema: 'public',\n        table: 'jobs',\n        filter: `job_id=eq.${currentJobId}`\n      }, (payload) => {\n        console.log('Job progress updated:', payload.new);\n        \n        // Update progress state\n        if (payload.new) {\n          const jobData = payload.new as any;\n          const progress = jobData.progress || 0;\n          const message = `Completed: ${jobData.completed_items}/${jobData.total_items} ads`;\n          \n          onProgressUpdate(progress, message);\n          \n          // Handle job completion\n          if (jobData.status === 'completed') {\n            onJobComplete(jobData.result);\n          } else if (jobData.status === 'failed') {\n            onJobFailed(jobData.error_message || \"An error occurred\");\n          }\n        }\n      })\n      .subscribe();\n\n    // Cleanup subscription\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [currentJobId, onProgressUpdate, onJobComplete, onJobFailed]);\n} "],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,YAAY,QAAQ,uBAAuB;;AAEpD;AACA,MAAMC,QAAQ,GAAGD,YAAY,CAC3BE,OAAO,CAACC,GAAG,CAACC,sBAAsB,EAClCF,OAAO,CAACC,GAAG,CAACE,2BACd,CAAC;AASD,OAAO,SAASC,uBAAuBA,CAAC;EACtCC,YAAY;EACZC,gBAAgB;EAChBC,aAAa;EACbC;AACyB,CAAC,EAAE;EAAAC,EAAA;EAC5BZ,SAAS,CAAC,MAAM;IACd,IAAI,CAACQ,YAAY,EAAE;IAEnB,MAAMK,YAAY,GAAGX,QAAQ,CAC1BY,OAAO,CAAC,cAAc,CAAC,CACvBC,EAAE,CAAC,kBAAkB,EAAE;MACtBC,KAAK,EAAE,QAAQ;MACfC,MAAM,EAAE,QAAQ;MAChBC,KAAK,EAAE,MAAM;MACbC,MAAM,EAAE,aAAaX,YAAY;IACnC,CAAC,EAAGY,OAAO,IAAK;MACdC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEF,OAAO,CAACG,GAAG,CAAC;;MAEjD;MACA,IAAIH,OAAO,CAACG,GAAG,EAAE;QACf,MAAMC,OAAO,GAAGJ,OAAO,CAACG,GAAU;QAClC,MAAME,QAAQ,GAAGD,OAAO,CAACC,QAAQ,IAAI,CAAC;QACtC,MAAMC,OAAO,GAAG,cAAcF,OAAO,CAACG,eAAe,IAAIH,OAAO,CAACI,WAAW,MAAM;QAElFnB,gBAAgB,CAACgB,QAAQ,EAAEC,OAAO,CAAC;;QAEnC;QACA,IAAIF,OAAO,CAACK,MAAM,KAAK,WAAW,EAAE;UAClCnB,aAAa,CAACc,OAAO,CAACM,MAAM,CAAC;QAC/B,CAAC,MAAM,IAAIN,OAAO,CAACK,MAAM,KAAK,QAAQ,EAAE;UACtClB,WAAW,CAACa,OAAO,CAACO,aAAa,IAAI,mBAAmB,CAAC;QAC3D;MACF;IACF,CAAC,CAAC,CACDC,SAAS,CAAC,CAAC;;IAEd;IACA,OAAO,MAAM;MACXnB,YAAY,CAACoB,WAAW,CAAC,CAAC;IAC5B,CAAC;EACH,CAAC,EAAE,CAACzB,YAAY,EAAEC,gBAAgB,EAAEC,aAAa,EAAEC,WAAW,CAAC,CAAC;AAClE;AAACC,EAAA,CA1CeL,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}