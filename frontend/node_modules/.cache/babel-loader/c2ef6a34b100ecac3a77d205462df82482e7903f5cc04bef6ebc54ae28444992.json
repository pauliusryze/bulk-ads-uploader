{"ast":null,"code":"/**\n * Returns the start and end months for calendar navigation.\n *\n * @param props The DayPicker props, including navigation and layout options.\n * @param dateLib The date library to use for date manipulation.\n * @returns A tuple containing the start and end months for navigation.\n */\nexport function getNavMonths(props, dateLib) {\n  let {\n    startMonth,\n    endMonth\n  } = props;\n  const {\n    startOfYear,\n    startOfDay,\n    startOfMonth,\n    endOfMonth,\n    addYears,\n    endOfYear,\n    newDate,\n    today\n  } = dateLib;\n  // Handle deprecated code\n  const {\n    fromYear,\n    toYear,\n    fromMonth,\n    toMonth\n  } = props;\n  if (!startMonth && fromMonth) {\n    startMonth = fromMonth;\n  }\n  if (!startMonth && fromYear) {\n    startMonth = dateLib.newDate(fromYear, 0, 1);\n  }\n  if (!endMonth && toMonth) {\n    endMonth = toMonth;\n  }\n  if (!endMonth && toYear) {\n    endMonth = newDate(toYear, 11, 31);\n  }\n  const hasYearDropdown = props.captionLayout === \"dropdown\" || props.captionLayout === \"dropdown-years\";\n  if (startMonth) {\n    startMonth = startOfMonth(startMonth);\n  } else if (fromYear) {\n    startMonth = newDate(fromYear, 0, 1);\n  } else if (!startMonth && hasYearDropdown) {\n    startMonth = startOfYear(addYears(props.today ?? today(), -100));\n  }\n  if (endMonth) {\n    endMonth = endOfMonth(endMonth);\n  } else if (toYear) {\n    endMonth = newDate(toYear, 11, 31);\n  } else if (!endMonth && hasYearDropdown) {\n    endMonth = endOfYear(props.today ?? today());\n  }\n  return [startMonth ? startOfDay(startMonth) : startMonth, endMonth ? startOfDay(endMonth) : endMonth];\n}","map":{"version":3,"names":["getNavMonths","props","dateLib","startMonth","endMonth","startOfYear","startOfDay","startOfMonth","endOfMonth","addYears","endOfYear","newDate","today","fromYear","toYear","fromMonth","toMonth","hasYearDropdown","captionLayout"],"sources":["/Users/paulius/Downloads/Projects/Meta Ads Uploader/frontend/node_modules/react-day-picker/src/helpers/getNavMonth.ts"],"sourcesContent":["import { type DateLib } from \"../classes/DateLib.js\";\nimport type { DayPickerProps } from \"../types/index.js\";\n\n/**\n * Returns the start and end months for calendar navigation.\n *\n * @param props The DayPicker props, including navigation and layout options.\n * @param dateLib The date library to use for date manipulation.\n * @returns A tuple containing the start and end months for navigation.\n */\nexport function getNavMonths(\n  props: Pick<\n    DayPickerProps,\n    | \"captionLayout\"\n    | \"endMonth\"\n    | \"startMonth\"\n    | \"today\"\n    | \"timeZone\"\n    // Deprecated:\n    | \"fromMonth\"\n    | \"fromYear\"\n    | \"toMonth\"\n    | \"toYear\"\n  >,\n  dateLib: DateLib\n): [start: Date | undefined, end: Date | undefined] {\n  let { startMonth, endMonth } = props;\n\n  const {\n    startOfYear,\n    startOfDay,\n    startOfMonth,\n    endOfMonth,\n    addYears,\n    endOfYear,\n    newDate,\n    today\n  } = dateLib;\n\n  // Handle deprecated code\n  const { fromYear, toYear, fromMonth, toMonth } = props;\n  if (!startMonth && fromMonth) {\n    startMonth = fromMonth;\n  }\n  if (!startMonth && fromYear) {\n    startMonth = dateLib.newDate(fromYear, 0, 1);\n  }\n  if (!endMonth && toMonth) {\n    endMonth = toMonth;\n  }\n  if (!endMonth && toYear) {\n    endMonth = newDate(toYear, 11, 31);\n  }\n\n  const hasYearDropdown =\n    props.captionLayout === \"dropdown\" ||\n    props.captionLayout === \"dropdown-years\";\n  if (startMonth) {\n    startMonth = startOfMonth(startMonth);\n  } else if (fromYear) {\n    startMonth = newDate(fromYear, 0, 1);\n  } else if (!startMonth && hasYearDropdown) {\n    startMonth = startOfYear(addYears(props.today ?? today(), -100));\n  }\n  if (endMonth) {\n    endMonth = endOfMonth(endMonth);\n  } else if (toYear) {\n    endMonth = newDate(toYear, 11, 31);\n  } else if (!endMonth && hasYearDropdown) {\n    endMonth = endOfYear(props.today ?? today());\n  }\n  return [\n    startMonth ? startOfDay(startMonth) : startMonth,\n    endMonth ? startOfDay(endMonth) : endMonth\n  ];\n}\n"],"mappings":"AAGA;;;;;;;AAOA,OAAM,SAAUA,YAAYA,CAC1BC,KAYC,EACDC,OAAgB;EAEhB,IAAI;IAAEC,UAAU;IAAEC;EAAQ,CAAE,GAAGH,KAAK;EAEpC,MAAM;IACJI,WAAW;IACXC,UAAU;IACVC,YAAY;IACZC,UAAU;IACVC,QAAQ;IACRC,SAAS;IACTC,OAAO;IACPC;EAAK,CACN,GAAGV,OAAO;EAEX;EACA,MAAM;IAAEW,QAAQ;IAAEC,MAAM;IAAEC,SAAS;IAAEC;EAAO,CAAE,GAAGf,KAAK;EACtD,IAAI,CAACE,UAAU,IAAIY,SAAS,EAAE;IAC5BZ,UAAU,GAAGY,SAAS;EACxB;EACA,IAAI,CAACZ,UAAU,IAAIU,QAAQ,EAAE;IAC3BV,UAAU,GAAGD,OAAO,CAACS,OAAO,CAACE,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC;EAC9C;EACA,IAAI,CAACT,QAAQ,IAAIY,OAAO,EAAE;IACxBZ,QAAQ,GAAGY,OAAO;EACpB;EACA,IAAI,CAACZ,QAAQ,IAAIU,MAAM,EAAE;IACvBV,QAAQ,GAAGO,OAAO,CAACG,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC;EACpC;EAEA,MAAMG,eAAe,GACnBhB,KAAK,CAACiB,aAAa,KAAK,UAAU,IAClCjB,KAAK,CAACiB,aAAa,KAAK,gBAAgB;EAC1C,IAAIf,UAAU,EAAE;IACdA,UAAU,GAAGI,YAAY,CAACJ,UAAU,CAAC;EACvC,CAAC,MAAM,IAAIU,QAAQ,EAAE;IACnBV,UAAU,GAAGQ,OAAO,CAACE,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC;EACtC,CAAC,MAAM,IAAI,CAACV,UAAU,IAAIc,eAAe,EAAE;IACzCd,UAAU,GAAGE,WAAW,CAACI,QAAQ,CAACR,KAAK,CAACW,KAAK,IAAIA,KAAK,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;EAClE;EACA,IAAIR,QAAQ,EAAE;IACZA,QAAQ,GAAGI,UAAU,CAACJ,QAAQ,CAAC;EACjC,CAAC,MAAM,IAAIU,MAAM,EAAE;IACjBV,QAAQ,GAAGO,OAAO,CAACG,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC;EACpC,CAAC,MAAM,IAAI,CAACV,QAAQ,IAAIa,eAAe,EAAE;IACvCb,QAAQ,GAAGM,SAAS,CAACT,KAAK,CAACW,KAAK,IAAIA,KAAK,EAAE,CAAC;EAC9C;EACA,OAAO,CACLT,UAAU,GAAGG,UAAU,CAACH,UAAU,CAAC,GAAGA,UAAU,EAChDC,QAAQ,GAAGE,UAAU,CAACF,QAAQ,CAAC,GAAGA,QAAQ,CAC3C;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}